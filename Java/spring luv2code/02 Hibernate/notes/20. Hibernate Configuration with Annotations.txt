Hibernate Configuration with Annotations

ToDo list
I. Add Hibernate Configuration file
II. Annotate Java Class
III. Develop Java Code to perform database operations

I. Add Hibernate Configuration file
	> add it inside the src/main/java

hibernate.cfg.xml

<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>

    <session-factory>

        <!-- Database connection settings -->
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="connection.url">jdbc:mysql://localhost/accdb</property>
        <property name="connection.username">root</property>
        <property name="connection.password">TEST_PASSWORD</property>

        <!-- JDBC connection pool (use the built-in) -->
        <property name="connection.pool_size">5</property>

        <!-- SQL dialect -->
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>

       
        <!-- Disable the second-level cache  -->
        <property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>

        <!-- Echo all executed SQL to stdout -->
        <property name="show_sql">true</property>

        <!-- Drop and re-create the database schema on startup -->
        <property name="hbm2ddl.auto">create</property>

       
 
    </session-factory>

</hibernate-configuration>



II. Annotate Java Classes

Entity Class
	> Java class that is mapped to a database table
	> annotated with @Entity
	> typically a POJO class

Two options for Mapping
1. XML config file (legacy)
2. Java Annotations (modern, preferred)


Java Annotations
1. Map class to database
2. Map fields to database columns



Setting Up Entity class
1. Create a POJO that will represent the table
	- create two constructor
		= empty, all param except id, all param
2. Annotate the POJO Class

@Entity
	> added in class
	> specify that the POJO class will be used for creating table
@Table(name="")
	> added in class
	> specify the name of table generated by hibernate for this @Entity
@Id
	> added in field member
	> denotes that the field annotated will serve as PRIMARY KEY
@GeneratedValue
	> added in field member with @Id
	> Type of field must be auto-incrementable (int long Integer Long)
	> Hibernate will autogenerate the column value for you
@Column(name="")
	> added in field member
	> specify the column name this field will be mapped to
	
