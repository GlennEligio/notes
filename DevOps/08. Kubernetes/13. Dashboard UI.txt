11. Kubernetes Dashboard



Dashboard
	> a web-based Kubernetes user interface
	> you can use Dashboard to 
		- deploy containerized application to a Kubernetes cluster
		- troubleshoot your containerized application
		- manage the cluster resources
		- get an overview of application running on your cluster
		- create or modify individual Kubernetes resources (Deployments, Jobs, DaemonSets, etc)
		- scale resources (Deployment, ReplicaSet)
		- initiate a rolling update
		- restart a Pod
	> Dashboard also provides information on the state of Kubernetes resources in your cluster and on any errors that may have occurred



CREATING DASHBOARD UI 
0. Go back to home folder
	cd /home/ubuntu
1. Run this yaml file
	kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml
2. Get the Service "kubernetes-dashboard" under "kubernetes-dashboard" namespace
	> we will see a Service
	kubectl get svc kubernetes-dashboard -n kubernetes-dashboard
3. Edit this service
	> change type: from ClusterIp to NodePort
	> with ClusterIp, we can only access this Node internally
	> with NodePort, we can now access this Node externally
	kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard
4. Check Ip address where the pods created by Manifest file earlier is running
	> check which node kubernetes-dashboard is running
	kubectl get pods -n kubernetes-dashboard -o wide
5. Check which tcp port kubernetes-dashboard is running
	> take note of the second number in the PORT(S) column
	kubectl get svc kubernetes-dashboard -n kubernetes-dashboard
6. Access the Dashboard UI
	> public ip of node where kubernetes dashboard is running + port where kubernetes dashboard is running + "/#/login"
	13.235.61.221:30900/#/login


CREATE SERVICE ACCOUNT
7. Create a serviceaccount "cluster-admin-dashboard-sa"
	kubectl create serviceaccount cluster-admin-dashboard-sa
8. Bind ClusterAdmin role to the service account
	kubectl create clusterrolebinding cluster-admin-dashboard-sa --clusterrole=cluster-admin --serviceaccount=default:cluster-admin-dashboard-sa
9. Parse the token created
	TOKEN=$(kubectl describe secret $(kubectl -n kube-system get secret | awk '/^cluster-admin-dashboard-sa-  token-/{print $1}') | awk '$1=="token:"{print $2}')
10. Print out the TOKEN file
	echo $TOKEN


ACCESS DASHBOARD UI
11. Go to Dashboard UI

12. Paste the Token we print out earlier
	> you should be in the dashboard overview after passing the token



CREATING PODS IN DASHBOARD
13. Got the Pods at left section
14. Press the plus icon at top	
	> here, we can create Pods either by
		a. writing the manifest file in the dashboard	
		b. uploading a yaml file
		c. using the k8s template form to fill up information about pod
15. Copy this text inside the option 1
apiVersion: v1
kind: Pod
metadata:
  name: pod2
spec:
  containers:
  - name: c1
    image: nginx

16. Check the status of Pod in Pods section

17. Delete the Pod weve just created


CREATING DEPLOYMENT
18. Create Pods using the third option
	name: pod-deploy
	image: nginx	
	service: none
19. Go to Overview section at left
	> we should see Deployment, Pods, Services created together
20. Scale Deployment
	> press three dots at the right of Deployment
	> choose scale
		- set to 5
21. Check the Overview
	> there should be 5 Pods now
22. Delete the Deployment
	> this will delete the Services and Pods altogether as well