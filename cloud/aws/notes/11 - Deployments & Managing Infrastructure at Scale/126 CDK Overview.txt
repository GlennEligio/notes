126 CDK Overview

AWS Cloud Development Kit (CDK)
 > Define you cloud infrastructure using a familiar language
 	- JavaScript/Typescript, Python, Java, and .NET
 > The code is "compiled" into a CloudFormation template (JSON/YAML)
 > You can therefore deploy infrastructure and application runtime code together
	- Great for Lambda functions
	- Great for Docker containers in ECS/EKS
 

CDK Diagram
CDK Applications
 > Lambda, DynamoDB, S3, EC2 defined using familiar language (JS, Java, .NET, etc)
 |
 |
 |
 V

CDK CLI

 |
 |
 |
 V

CloudFormation Template]

 |
 |
 | 
 V

CloudFormation




CDK Example
export class MyEcsConstructStack extends core.Stack {
  constructor(scope: core.App, id: string, props?: core.StackProps) {
    super(scope, id, props);

    const vpc = new ec2.Vpc(this, "MyVpc", {
      maxAzs: 1 // Default is all AZs in region
    })
  
    const cluster = new ecs.Cluster(this, "MyCluster", {
      vpc: vpc
    })

    // Create a load-balanced Fargate service and make it public
    new ecs_patterns.ApplicationLoadBalancedFargateService(this, "MyFargate", {
      cluster: cluster, // Required
      cpu: 512, // Default is 256
      desiredCount: 6, // Default is 1
      taskImageOptions: { image: ecs.ContainerImage.fromRegistry("amz")},
      memoryLimitMiB: 2048, // Default is 512
      publicLoadBalancer: true // Default is false
    })
  }
}


In this example, we defined a VPC, a Cluster, and an ApplicationLoadBalancer