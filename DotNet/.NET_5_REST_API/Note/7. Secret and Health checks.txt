Secrets and Health Checks


Topics to discuss:
1. How to store and use secrets via the .NET Secret Manager
2. How to use health checks to report the health of the REST API and its dependencies


Secrets Management



I. Modify MongoDB Docker Image 
	> 


1. Stop the MongoDB Docker Container instance 
	> to stop a Docker container, type the following in the terminal

		docker stop <ImageName>

	> in our case, it will be 

		docker stop mongo



2. Remove the volume that our Docker Image is contained
	> reason is that we will create a new one with different configuration (additional environment variable)
	> check the volumes we have in Docker, type the following command in terminal

		docker volume ls

	> to remove the mongodbdata volume, type the following command

		docker volume rm <VolumeName>





3. Using the previous command line to create Docker Container/Image, add a new Environment Variables into it
	> add login to the MongoDb
		- User & Pass
	> to add an Environment variable, use this flag when creating Docker Image
		
		- e <EnvVarName>=<EnvVarValue>

IN THE TERMINAL

docker run -d --rm --name mongo -p 27017:27017 -v mongodbdata:/data/db -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e MONGO_INITDB_ROOT_PASSWORD=Pass#word1 mongo




	Now, our MongoDb Docker Container requires authentication. 



4. Test the application to see the changes
	> we should see a MongoDB.Driver.MongoCommandException error which states that command find REQUIRES authentication




II. Add the User and Password in our Application
	> add User in appsettings
	> add Pass in user secrets

5. Add new item inside the MongoDbSettings item in appsettings.json
	- "User": "mongoadmin"

INSIDE appsettings.json file

  "MongoDbSettings": {
    "Host": "localhost",
    "Port": 27017,
    "User": "mongoadmin"
  }



6. Initialize the User Secrets manager
	> to do this, type the following command in terminal

		dotnet user-secrets init

	> if we check at the Catalog.csproj file, we can see a new tags inside the <PropertyGroup> named <UserSecretsId>
	> inside the UserSecretsId tag, theres a GUID that represents the UserSecrets folder name
	> inside the said folder, a json file which contains all the data we inserted can be found



7. Add the MongoDb Password into the User Secrets
	> instead of adding a "Password" in the UserSecrets, we want to have the same format as the MongoDb variables in the appsettings.json
		= this is because when we fetch the "MongoDbSettings" item in Configuration sources, it will get all the "MongoDbSettings" in those sources and MERGE THEIR PROPERTIES, thus forming a single "MongoDbSettings" with properties fetched from different Config sources
	> in order to add a secret that is a property of an item, we will use this format

		dotnet user-secrets set <ItemName>:<PropertyName> <PropertyValue>

	> in our case, the ItemName is MongoDbSettings, PropertyName is Password, and the PropertyValue is the MongoDb password we added as Environment Variable

		dotnet user-secrets set MongoDbSettings:Password Pass#word1

	> this should show in the terminal

		Successfully saved MongoDbSettings:Password = Pass#word1 to the secret store.





III. Modify the MongoDbSettings class in Settings folder


8. Add new property in the MongoDbSettings class
	- User
	- Password

INSIDE MongoDbSettings class

        public string User { get; set; }
        public string Password { get; set; }




9. Modify the return value of get{} of ConnectionString property 
	> add {User}:{Password}@ inside the return string value
	> the convention for the ConnectionString with Authentication of MongoDb is as follows
		= without the angle brackets

		mongodb://<User>:<Password>@<Host>:<Port>

INSIDE MongoDbSettings class

        public string ConnectionString 
        { 
            get
            {
                return $"mongodb://{User}:{Password}@{Host}:{Port}";
            }
        }

	


V. Testing the REST API	

10. Test the Rest api
	> save all, build and run
	> check the endpoints of controller

	We should not be getting the authentication error anymore to our Route endpoints



