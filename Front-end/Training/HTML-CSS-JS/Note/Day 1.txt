Day 1

HTML, CSS, Javascript, Typescript, and React

Programming language types
1. Client side programming language
	> used in front-end development
	> uses resources from the Client's local machine
	> some of this are
		- HTML (Hyper text markup language)	
		- CSS (Cascading style sheet)
		- Javascript
		- Javascript Libraries (jQuery, React)
		- Javascript Framework (Angular)
2. Server side programming language
	> used for back-end development
	> uses resources from Server's machine
	> used for
	 	- Interact with database
		- File system
		- Network applications
	> some of this are
		- Java
		- Python
		- Perl
		- Asp.NET

3. Database
	- used to store data
	- some of this are
		a. Oracle
		b. Mysql
		c. Sql
		d. SqlLite

4. Nosql Database
	- used to store data
	- dont use SQL as query language


Full Stack Web Developer
	> must know Client Side, Server side, and Database\

Coverage of this Training
	> Client Side


Tools needed
1. Visual Studio Code (Coding Editor)
2. Chrome Browser (or any browser in general)
3. nodeJS



nodeJS commands

node --version
node -v
	> shows the nodeJS version currently install in local machine



HTML
	> stands for Hyper text markup language
	> used to display data in web browser
	> HTML files uses .html file extension
	> a client side programming language
		- this is so that we can run html directly in client's web browser
	> HTML file is composed of HTML <elements>


HTML Element
	> compose of opening and closing tag
		- ex: <element>Content</element>
	> there are some element where closing tag is OPTIONAL
		- these elements use WITHOUT CONTENT between opening and closing tags
		- ex: <br>	<link>


Structure of HTML
1. <html>
	> represent the root of the HTML page
	> in JavaScript, can be referred to as the document variable
	> contains all the data of an HTML page
	> contains two parts:
		a. <head>
			- contains metadata, links, stylesheet, etc
			- represent the collection of metadata in the HTML document
		b. <body>
			- contains the elements used to populate HTML page with displays
			- represent the content of the HTML page

<head> elements
<title>
	> represents the document's title or name
	> defines the name of browser tab of the HTML page


<body> elements

<br>
	> linebreak
	> used to create space between line

<hr>
	> linebreak but with a horizontal line

<b>
	> represents a bold text
	> all text inside this tag is in BOLD
<strong>
	> text inside this are STRONG
<big>
	> text inside this tag are BIG
<em>
	> text inside this are EMPHASIZED
<i>
	> text inside this are in ITALIC
<small>
	> text inside this are in SMALL

<pre>
	> all text inside this will be displayed as is
		- will ignore the whitespace reduction of HTML

<p>
	> stands for paragraph element
	> theres a linebreak before the paragraph content
		
<h1>
<h2>
<h3>
<h4>
<h5>
	> represents a section heading
	> the higher the number, the smaller the font size of content

<img>
	> represents an image 
	> have parameters like
		a. src
			= defines the source of the image
			= can be a URL for internet image or file directory for loca image file in project
		b. alt
			= defines the text displayed if image cant be rendered for some reason

ex: 
    <img
      src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"
      alt="Google logo"
    />
    <img
      src="./googlelogo_color_272x92dp.png"
      alt="Google logo in project file"
    />


<a>
	> represent a link tag where user can interact to navigate to another page
	> have parameters like
		a. href
			= refers to the location of the page to navigate
			= can be 
				- URL link to navigate to webpage in internet, or 
				- HTML file directory to navigate to another page in project
		b. target
			= refers to where we will display the webpage
			= can be
				- "_self" where it will open the page on the same browser tab (default)
				- "_blank" where it will open the page in a new blank page
EX:
    <a href="https://www.google.com">Google Link</a>
    <a href="./04-image.html">04 Link HTML in local project directory</a>


LIST

<li>
	> refers to a List Item

<ul>
	> refers to an Unordered List
	> list is displayed without numbers
	> can nest <li> elements

<ol>
	> refers to an Ordered List
	> list is display WITH numbers
	> can nest <li> elements inside 

EX:
    <p>Unordered List</p>
    <ul>
        <li>One</li>
        <li>Two</li>
        <li>Three</li>
    </ul>

    <p>Ordered List</p>
    <ol>
        <li>One</li>
        <li>Two</li>
        <li>Three</li>
    </ol>



TABLE

<table>
	> represents a table
	> can nest <tr> table row
<tr>
	> represents a table row
	> can nest <td> table data, or <th> table header
<td>
	> represents a table data
	> have attributes 
		a. colspan
			= define the column span of a specific table cell
<th>
	> represents a table heading
	> same as table data, but they are in BOLD
	> have attributes
		a. colspan
			= define the column span of a specific table cell
<thead>
	> represents a table head 
		- nested inside are table row that represents the table headings
<tbody>	
	> represents a table body
		- nest inside are table row that represents the body of table



FORM

<form>
	> represents a form where user can input different data to send to another webpage
	> this element can nest different element that can be used to take data like input, checkbox, radiobutton, etc
	> we can then use input of type button or button itself to send out those data
	> have attributes like
		a. action
			> define the destination of the form data to send
			> can be a 
				- URL to another page in internet
				- file location of an HTML in project
		b. method
			> define the HTTP method used to send form data
			> can be POST, GET, DELETE, PUT, etc
		c. 




EXTENSIONS FOR HTML DEVELOPMENT
1. Live Server
	> made by Ritwick Dey
	> launch a development live server that displays the html page Live
		- any changes in HTML file will be reflected in Live Server



HTML ATTRIBUTES
	> for each HTML elements, we can modify them by specifying their HTML attributes
	
SYNTAX
<element attribute1=value attribute2=value> Content </element>

	> some of the attributes common in <body> HTML elements are
		a. style
			= use to define a in-line CSS for the element
		b. border
			= used to define border properties of an element
		c. title
			= used to provide more information
			= when mouse cursor to the element, it will show a textbox



CSS
	> cascading style sheet
	> used to design the webpage
	> three ways to add CSS to Webpages
		1. Inline CSS
			- same line css
			- added style to a specific <element>
		2. Internal CSS
			- added in HTML by adding <style> in <head> section of HTML page
			- in <style>, and inside we can define CSS codes
		3. External CSS
			- CSS codes are in separate file
			- added in HTML page using <link>, then defining 

EX:
INLINE CSS
    <!-- Inline CSS -->
    <!-- style is an HTML attribute -->
    <h1 style="color:blue">Programming with myself</h1>

INTERNAL CSS inside <head>
    <!-- Internal CSS -->
    <style>
        h1 {
            color: red;
        }
        h2 {
            color: blue;
        }
        h3 {
            border: 1px solid black;
        }
    </style>


EXTERNAL CSS
    <!-- External CSS -->
    <link rel="stylesheet" href="./style.css">





SHORTCUTS:
1. element*n	
	> create an n amount of element

EX:
tr*6

RESULT:
      <tr></tr>
      <tr></tr>
      <tr></tr>
      <tr></tr>
      <tr></tr>
      <tr></tr>


2. element1*n>element2*n
	> create an n amount of element1, with n amount of element2 nested inside of each of element1

EX:
tr*3>td*3

RESULT:
      <tr>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
      </tr>
      <tr>
        <td></td>
        <td></td>
        <td></td>
      </tr>

