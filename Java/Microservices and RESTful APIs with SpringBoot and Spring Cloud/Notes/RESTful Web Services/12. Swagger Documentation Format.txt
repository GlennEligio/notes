12. Swagger Documentation Format


Swagger Documentation
	> presented in either JSON format or HTML page
	> JSON can be fetched using the path
		- host + /v2/api-docs
		- ex: localhost:8080/
		- the JSON is composed of different properties
	> HTML page can be visited using
		- host + /swagger-ui/
			= slash at the end is important
		- ex: localhost:8080/swagger-ui/


1. "swagger": "2.0",
	> defines the version of Swagger used

2. info:{...}
	> contains high level information about the API such as
		- description / name
		- version of API
		- title
		- license
		- tos
		- contacts

"info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }


3. "host": "localhost:8080"
	> defines the host url that is containing the API

4. "basePath": "/"	
	> defines the basePath of the API
	> host + basePath = base_url
		- ex: localhost:8080/

5. "tags"
	> used to group each Resources

"tags": [
    {
        "name": "basic-error-controller",
        "description": "Basic Error Controller"
    },
    {
        "name": "hello-world-controller",
        "description": "Hello World Controller"
    },
    {
        "name": "user-controller",
        "description": "User Controller"
    }
]


6. "paths"
	> includes the details of all the Resources that we are exposing and the different operations that can be performed on each of these resources
	> each of the items in paths, we can see
		- each operations like GET/POST/PUT/DELETE
	> and each of the operations contains information such as
		- tags	
		- summary
		- operationId
		- consumes / produces
			= defines the representation they accept / sends back
		- parameters link
			= input data type 
				=> how data is being sent to endpoint (e.g. query param, body, path)
			= schema of the input data
		- responses
			- status code and their response content

GENERAL OVERVIEW OF PATHS

"paths": {
    "/error": {},
    "/hello-world": {},
    "/hello-world-bean": {},
    "/hello-world-internationalized": {},
    "/hello-world/path-variable/{name}": {},
    "/users": {},
    "/users/{id}": {}
}

INSIDE ONE OF THE PATH "/users"

"/users": {
    "get": {
        "tags": [
            "user-controller"
        ],
        "summary": "retrieveAllUsers",
        "operationId": "retrieveAllUsersUsingGET",
        "produces": [
            "*/*"
        ],
        "responses": {
            "200": {
                "description": "OK",
                "schema": {
                    "$ref": "#/definitions/CollectionModel«EntityModel«User»»"
                }
            },
            "401": {
                "description": "Unauthorized"
            },
            "403": {
                "description": "Forbidden"
            },
            "404": {
                "description": "Not Found"
            }
        }
    },
    "post": {
        "tags": [
            "user-controller"
        ],
        "summary": "createUser",
        "operationId": "createUserUsingPOST",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "*/*"
        ],
        "parameters": [
            {
                "in": "body",
                "name": "user",
                "description": "user",
                "required": true,
                "schema": {
                    "$ref": "#/definitions/User"
                }
            }
        ],
        "responses": {
            "200": {
                "description": "OK",
                "schema": {
                    "type": "object"
                }
            },
            "201": {
                "description": "Created"
            },
            "401": {
                "description": "Unauthorized"
            },
            "403": {
                "description": "Forbidden"
            },
            "404": {
                "description": "Not Found"
            }
        }
    }
}


7. "definitions"
	> contains different elements that are used in the API
		- includes Object that are in API endpoint method's parameter and return type
	> each of the items contains definition of them like 
		- type
		- properties
		- title

"definitions": {
    "CollectionModel«EntityModel«User»»": {},
    "EntityModel«User»": {},
    "HelloWorldBean": {},
    "Links": {},
    "ModelAndView": {},
    "User": {
        "type": "object",
        "properties": {
            "birthDate": {
                "type": "string",
                "format": "date-time"
            },
            "id": {
                "type": "integer",
                "format": "int32"
            },
            "name": {
                "type": "string",
                "minLength": 2,
                "maxLength": 2147483647
            }
        },
        "title": "User"
    },
    "View": {}
}


