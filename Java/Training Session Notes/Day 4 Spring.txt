Day 4 Spring

Bootstrap
	> used to design a webpage / jsp
	
ADDING Bootstrap in JSP
	> copy the <link> for adding Bootstrap and add it inside the 

		<!-- CSS only -->
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" 		integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">


Designing with Bootstrap
	> we will added specific class from Bootstrap inside the html elements to design them

"container"
	> added in <div>
"form-control"
	> added in <input>
"btn btn-success"
"btn btn-warning"
"btn btn-destroy"
"card text-center"
"card-header"
"card-body"
"card-title"
"card-footer"
"text-center"
"m-4"
	> defines the margin of the element



FORM VALIDATION
	> used to validate the contents of the form
	> we use specific @Annotations to be added in the Entity class field attributes
	> to use these annotations, we will need the Bean Validation API


Maven dependencies

<dependency>
    <groupId>javax.validation</groupId>
    <artifactId>validation-api</artifactId>
    <version>2.0.1.Final</version>
</dependency>


Annotations ~ Bean Validation API

@NotEmpty
	> added to the attribute
	> this means that the attribute cannot be empty

@Valid
	> added in the parameter of a @Controller method



Classes ~ Bean Validation API
	
BindingResult 
	> used to fetch the result of validation of the Bean parameters it is included with
	> ex: 

public String methodName(@Valid @ModelAttribute User user, BindingResult result){
	if(result.hasError())

}
	> have the following method

boolean hasErrors()
	> checks if the parameters it is with have validation errors


@RequestBody
	> added in the parameter of @RestController
	> used in order to parse JSON request body