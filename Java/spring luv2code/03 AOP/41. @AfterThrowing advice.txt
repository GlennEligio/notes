@AfterThrowing Advice
	> this advice will run after an exception
	> in addition of pointcut="" property, this Advice will have the throwing="" property

throwing=""
	> property exclusive to @AfterThrowing advice
	> defines the Throwable parameter of Advice method that will store the thrown exception in the method its advicing 


USE CASES
1. Log the exception
2. Perform auditing on the exception
3. Notify DevOps team via email or SMS
	> use with care
	> dont spam
4. Encapsulate this functionality in AOP aspect for easy reuse


EXCEPTION PROPAGATION
	> exception will still propagate to the location the method that causes it
	> the @AfterThrowing Advice method will be executed first before the exception is propagate to the location where exception is thrown

Ex: 
	in Main App, the method that @AfterThrowing advices thrown an exception
	the exception is INTERCEPTED by the Advice, the Advice method will be executed, but it will still PROPAGATE to the MainApp where the method is called

	> to stop the exception propagate
		- use @Around advice



EX:

	// add a new advice for @AfterReturning on the findAccounts method
	@AfterReturning(pointcut = "execution(* com.dao.AccountDAO.findAccounts(..))", returning = "result")
	public void afterReturningFindAccountsAdvice(JoinPoint theJoinPoint, List<Account> result) {

		// print out which method we are advising on
		String method = theJoinPoint.getSignature().toShortString();
		System.out.println("\n=====> Executing @AfterReturning method: " + method);

		// print out the results of the method call
		System.out.println("\n=====> Result is: " + result);

		// lets post-process the data... lets modify it

		// convert the account names to uppercase
		convertAccountNamesToUpperCase(result);
		
		System.out.println("\n=====> Result: "+result);
	}