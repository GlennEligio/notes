07. Spring Boot Actuator

NOTES:
1. As of Spring Boot 2.5.0, /info is included in the hidden endpoint of Spring Boot Actuator
	> to expose the endpoint and the properties, add this to the application.proerpties

# Use wildcard "*" to expose all endpoints
# Can also expose individual endpoints with a comma-delimited list
management.endpoints.web.exposure.include=/info

# enable the info environment variables
management.info.env.enabled = true


Problems
1. How can I monitor and manage my application?
2. How can I check the application health?
3. How can I access application metrics?


Spring Boot Actuator
	> Exposes endpoints to monitor and manage your application
	> You can easily get DevOps functionality out-of-the-box
	> Simple add the dependency to your POM file
	> REST endpoints are AUTOMATICALLY added to you application
		- no need to write additional code
	> these endpoints are prefixed with "/actuator"
		- ex: for /health, use localhost:8080/actuator/health


Adding Spring Boot Actuator dependency to the POM file

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>


Some endpoints of Spring Boot Actuator

NAME		DESCRIPTION
/health		Health information about your application
/info		Information about your project
		NOTE: As of Spring Boot 2.5.0, 
/auditevents	Audit events for your application
/beans		List of all beans registered in the Spring application context
/mappings	List of all @RequestMapping paths
/threaddump	Show list of thread currently running in Spring app


Heath Endpoint
	> /health 
	> checks the status of your application
	> normally used by monitoring apps to see if your app is up or down
	> Health status output is CUSTOMIZABLE based on your own business logic


Info Endpoint
	> /info
	> gives information about your application
	> default is empty
	> the output of this /info endpoint can be CUSTOMIZED in application.properties
	> properties STARTING with "info." will be used by /info	

EX:
INSIDE application.properties
info.app.name=My Super Cool App
info.app.description=A crazy and fun app, yoohoo!
info.app.version=1.0.0

localhost:8080/actuator/info output
{
    "app":{
        "name":"My Super Cool App",
        "description":"A crazy and fun app, yoohoo!",
        "version":"1.0.0"
    }
}



Exposing Endpoints
	> by default, ONLY /health and /info are exposed
	> to expose all actuator endpoints over HTTP, assign value to management.endpoints.web.expose.include in application.properties
		- assign the value of the endpoints you want to expose
EX:
INSIDE application.properties

# Use wildcard "*" to expose all endpoints
# Can also expose individual endpoints with a comma-delimited list

management.endpoints.web.exposure.include=*

# Expose only individual endpoints
management.endpoints.web.exposure.include=bean
management.endpoints.web.exposure.include=health,info



Hiding Spring Boot Actuators endpoint
1. Exclude them in the application.properties

# Exclude endpoints for exposure
management.endpoints.web.exposure.exclude=*
management.endpoints.web.exposure.exclude=bean
management.endpoints.web.exposure.exclude=health,info


2. Use Spring Security and define the authority of the Spring Boot 

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
			.antMatchers("/actuator/**").authenticated()
			.and()
			.formLogin();
	}


