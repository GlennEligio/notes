22. Using Eureka for Setting up Naming Server / Service Registry


Eureka Server
	> serves as a Naming Server or Service Registry
	> with this, we can call any Service registered to the Naming Server using their Service Name instead of their absolute URL
	> example scenario where using absolute URL for invoking other MicroServices is LoadBalancing
	> with LoadBalancing, a Service may be hosted in different TCP ports (8001, 8002, 8003, ...)
		- this means that the Service may be on other port but since we use absolute URL, we can not call it

DEPENDENCY to add

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>


Properties to define for Eureka Naming Server Service app
eureka.client.register-with-eureka
	> controls whether or not this client registers itself and therefore becomes discoverable. This alone does not imply that this client is going to fetch the information on other services' endpoints and therefore being able to connect to them.
	> we typically give this a value of FALSE

eureka.client.fetch-registry
	> fetchRegistry controls whether or not this client is going to try to connect to the Eureka server(s) in order to download the information on other services' endpoint. It can do so without registering itself. Quoting the documentation:
		- "Eureka clients fetches the registry information from the server and caches it locally. After that, the clients use that information to find other services."
	> same with register-with-eureka, we will give this a value of FALSE

Typical Properties for MicroService
spring.application.name
server.port


@Annotations to use

@EnableEurekaServer
	> adding in the class where @SpringBootApplication is located
	> Annotation to activate Eureka Server related configuration. EurekaServerAutoConfiguration