07.03. Toast 

~~~~~ COMPONENTS - TOAST ~~~~~
1. Toast overviews
2. Basics
3. Interactability / live
4. Translucent body
5. Stacking toast
6. Custom content
7. Color Scheme
8. Placement
9. Usage
	- Options
	- Methods
		a. show
		b. hide
		c. dispose
		d. getInstance
		e. getOrCreateInstance


1. Overview
	> Toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position.
	> Things to know when using the toast plugin:
		a. Toasts are opt-in for performance reasons, so YOU MUST INITIALIZE THEM YOURSELF.
		b. Toasts will AUTOMATICALLY hide after 5 seconds if you do not "autohide: false"
	
Classes used
"toast"
	> used to create Toast
"toast-header"
	> used to create Toast Header
"toast-body"
	> used to create Toast Body

HTML Attribute used
data-bs-dismissing="toast"
	> added to a Button inside a Toast
	> used to dismiss the Toast the button is nested on


2. Basics
	> Toast must have 
		1. Header
		2. Body
	> Header must contain
		1. Title
		2. At least ONE Close button (STRONGLY ENCOURAGED)
	> Body represents the content of Toast message
		-> recommended to nest all content of Toast body in ONE element



3. Interactability / Live using Button
	> To show a Toast
		> fetch the Button element and Toast using JS
		> if Button is present, add eventListenter to the Button, and inside the if statement
			a. create new Bootstrap Toast using bootstrap.Toast(toastElemenet);
			b. call show() of the Bootstrap Toast
	> Add "hide" class in "toast" to INITIALLY HIDE the Toast
	> To close a Toast
		1. Add Button inside the "Toast"
		2. Add "data-bs-dismiss="toast"" attribute to the Button


4. Translucent body
	> Toasts are slightly translucent to blend in with what’s below them.


5. Stacking toast
	> for Stacking Toast, nest all the "toast" element inside an element with "toast-container"
	> "toast-container" will do the following things
		a. Stack the "toast" element inside them vertically, like flex column items
		b. Adds margin/space between each "toast" element

6. Custom content
	> we can remove other Components inside the Toast
	> but we need to have at least minimum of
		1. Toast message content
		2. Close button with data-bs-dismiss="toast" attribute


7. Color Scheme
	> we can also apply text color and background utility classes in the Toast messages
	> ex: "text-white" "bg-primary"


8. Placement
	> we typically add these notification at the TOP RIGHT, as well as TOP MIDDLE
	> for placing them at corners, nest the Toast inside a "toast-container"
		-> we will them position the "toast-container" element at screen corner
		-> RECOMMENDED: Add padding to avoid Toast to stick at edge of container/screen


9. Usage

Fetching all Toast elements and initializing Bootstrap toast for methods

	var toastElList = [].slice.call(document.querySelectorAll('.toast'))
	var toastList = toastElList.map(function (toastEl) {
	  return new bootstrap.Toast(toastEl, option)
	})

Options
	> these options can be passed via data attributes or JavaScript
	> for data attribute, append the option name to "data-bs-" (ex: data-bs-animation="")

Name		Type		Default		Description
animation	boolean		true		Apply a CSS fade transition to the toast
autohide	boolean		true		Autohide the toast
delay		number 		5000		Delay hiding the toast (ms)


Methods
	> these methods are ASYNCHRONOUS and starts a transition
	> returns to the caller as soon as the transition started but before it ends
	> in addition, a method call on a transitioning component will be IGNORED

a. show
	> Reveals an element’s toast. Returns to the caller before the toast has actually been shown (i.e. before the shown.bs.toast event occurs). You have to manually call this method, instead your toast won’t show.
	> EX: toast.show()


b. hide
	> Hides an element’s toast. Returns to the caller before the toast has actually been hidden (i.e. before the hidden.bs.toast event occurs). You have to manually call this method if you made autohide to false.
	> EX: toast.hide()


c. dispose
	> Hides an element’s toast. Your toast will remain on the DOM but won’t show anymore.
	> toast.dispose()

d. getInstance
	> Static method which allows you to get the scrollspy instance associated with a DOM element

EX:
var myToastEl = document.getElementById('myToastEl')	// Fetch the "toast" element
var myToast = bootstrap.Toast.getInstance(myToastEl) // Returns a Bootstrap toast instance

e. getOrCreateInstance
	> Static method which allows you to get the scrollspy instance associated with a DOM element, or create a new one in case it wasn’t initialised

EX:
var myToastEl = document.getElementById('myToastEl')
var myToast = bootstrap.Toast.getOrCreateInstance(myToastEl) // Returns a Bootstrap toast instance



Events
Event type 		Description
show.bs.toast 		This event fires immediately when the show instance method is called.
shown.bs.toast 		This event is fired when the toast has been made visible to the user.
hide.bs.toast 		This event is fired immediately when the hide instance method has been called.
hidden.bs.toast 	This event is fired when the toast has finished being hidden from the user.	

EX:
var myToastEl = document.getElementById('myToast')
myToastEl.addEventListener('hidden.bs.toast', function () {
  // do something...like remove notification count on Facebook
})

	