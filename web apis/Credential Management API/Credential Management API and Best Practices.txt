Credential Management API and Best Practices

SOURCES:
VIDEO: https://www.youtube.com/watch?v=NJ-sphu2DqQ
PAGE: https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe


Contents:
i. BENEFITS OF CREDENTIAL MANAGEMENT API
I. SAVING CRENDENTIALS
01. Password Login
02. Federated Login
II. AUTO SIGN-IN
III. SIGN OUT
V. BEST PRACTICES










i. BENEFITS OF CREDENTIAL MANAGEMENT API

Benefits of Credential Management API
1. Enables auto sign-in across devices
2. Virtually enables a permanent session
3. Remembers federated accounts
4. Can use account chooser to skip forms
5. No typing on keyboard required









I. SAVING CRENDENTIALS FROM FORM

FORM USED:
<form id="signup" method="post">
  <input name="email" type="text" autocomplete="username">
  <input name="display-name" type="text" autocomplete="name">  
  <input name="password" type="password" autocomplete="new-password">
  <input type="submit" value="Sign Up!">
</form>


01. Password Login

Steps:
 > Interrupt a form submission
 > Authenticate through AJAX
 > Store the credential
 > Update the UI or proceed to the personalized page

// WHOLE CODE
var f = document.querySelector('#signup');
f.addEventListener('submit', e => {
  e.preventDefault();
  sendRequest(e.target)
  .then(profile => {
    if (window.PasswordCredential) {
      var c = new PasswordCredential(e.target);
      return navigator.credentials.store(c);
    } else {
      return Promise.resolve(profile);
    }
  }).then(profile => {
    if (profile) {
      updateUI(profile);
    }
  }).catch(error => {
    showError('Sign-in Failed');
  });
});


Interrupt a form submission
 > prevent the default behavior by calling preventDefault() in submit Event

// CODE
var f = document.querySelector('#signup');
f.addEventListener('submit', e => {
  e.preventDefault();



Authenticate through AJAX
 > we can also use other API to send the form content for authentication
	- we first need to authenticate the user in server before we store the credential in browser
 > recommended to use API that uses Promises to be able to handle authentication error

// CODE
sendRequest(e.target)
  .then(profile => {



Store the credential
 > if authentication from Server succeed, we can proceed to store the Credential
 > for storing credentials, we will use the `navigator.credentials.store()` function
	- this methods takes an instance of Credential
 > first, we want to check if Credential Management API feature exist
 > then, using the target of submit Event, we create a PasswordCredential instance
	- make sure we have an input in the form with name properties of "id" and "password"
 > we can use any object for PasswordCredential constructor AS LONG as it contains "id" and "password"
	- though its recommended to use the e.target for autocompletion feature
	
// CODE
   if (window.PasswordCredential) {
      var c = new PasswordCredential(e.target);
      return navigator.credentials.store(c);
    } else {
      return Promise.resolve(profile);
    }



Update the UI or proceed to the personalized page
 > for updating UI, we will do it when
	1. we finish storing the Credential instance
	2. if authentication from server failed

// CODE
  }).then(profile => {
    if (profile) {
      updateUI(profile);
    }
  }).catch(error => {
    showError('Sign-in Failed');
  });
});











02. Federated Login

Federated Login
 > Federated login is a great option because
	- User doesnâ€™t have to remember extra password for your website
	- Auth can happen with just by one tap in many cases

STEPS:
 > Authenticate the user with a third party identity
 > Store the identity information
 > Update the UI or proceed to the personalized page

// WHOLE CODE
var g = document.querySelector('#g-signin');
g.addEventListener('click', e => {
  gSignIn()
  .then(profile => {
    if (window.FederatedCredential) {
      var c = new FederatedCredential({
        id:       profile.id,
        provider: 'https://accounts.google.com',
        name:     profile.name,
        iconURL:  profile.iconUrl
      });
      return navigator.credentials.store(c);
    } else {
      return Promise.resolve(profile);
    }
  }).then(profile => {
    updateUI(profile);
  }).catch(error => {
    showError('Sign-in Failed');
  });
};


Authenticate the user with a third party identity
 > typically, the Federated login uses Promise
 > with this, we can easily chain Promise to either handle successful or failed Federated login

// CODE
var g = document.querySelector('#g-signin');
g.addEventListener('click', e => {
  gSignIn()
  .then(profile => {


Store the identity information
 > after a successful federated login, we will check if FederatedCredential exist in browser
	- if it does, store the credential
	- if not, return the Profile provided by the federated login promise
 > when storing a FederatedCredential, we will need to provide the following data (which is provided by Third party on Federated logins)
	- id
	- provider	
	- name
	- iconURL
 > we then call the navigator.credentials.store(), pass the FederatedCredential instance, and return the result of call (which is a Promise)
 > if federated login failed, return a resolved Promise with value of the profile

// CODE
   if (window.FederatedCredential) {
      var c = new FederatedCredential({
        id:       profile.id,
        provider: 'https://accounts.google.com',
        name:     profile.name,
        iconURL:  profile.iconUrl
      });
      return navigator.credentials.store(c);
    } else {
      return Promise.resolve(profile);
    }


Update the UI or proceed to the personalized page
 > same as the previous login (Password)

// CODE
  }).then(profile => {
    updateUI(profile);
  }).catch(error => {
    showError('Sign-in Failed');
  });
};











II. AUTO SIGN-IN

STEPS:
 > Get a credential information
 > Authenticate the user
 > Update the UI or proceed to the personalized page


// FULL CODE
if (window.PasswordCredential || window.FederatedCredential) {
  if (!user.isSignedIn()) {
    navigator.credentials.get({
      password: true,
      federated: {
        provider: [
          'https://accounts.google.com'
        ]
      },
      mediation: 'silent'
    }).then(c => {
      if (c) {
        switch (c.type) {
          case 'password':
            return sendRequest(c);
            break;
          case 'federated':
            return gSignIn(c);
            break;
        }
      } else {
        return Promise.resolve();
      }
    }).then(profile => {
      if (profile) {
        updateUI(profile);
      }
    }).catch(error => {
      showError('Sign-in Failed');
    });
  }
}



Get a credential information
 > first, we will check if the user is signed in
	- this function is separate from Cred Management API
 > then we will use the `navigator.credentials.get()` to fetch Credential
	- this method takes an "options" object
	- based on this options property and values, we will return a different set of Credentials
	- returns a Promise that contains a Credential instance
 > since we want both PasswordCredential and FederatedCredential, we will provide a "password" property and "federated" property
 > also, for auto signin, we NEED to set the "mediation" property of this options object to "silent"
	- this way, you can easily dismiss the process if the user
		-> has no credentials stored
		-> has multiple credentials stored
		-> is signed out

// CODE
if (window.PasswordCredential || window.FederatedCredential) {
  if (!user.isSignedIn()) {
    navigator.credentials.get({
      password: true,
      federated: {
        provider: [
          'https://accounts.google.com'
        ]
      },
      mediation: 'silent'
    })



Authenticate the user
 > in the Promise return by `navigator.credentials.get()`, we will check the resolved Credentials instance value
 > this Credential instance can be null or not null based on whether a Credential exit in CredentialsContainer
 > after the null check, we will check the Credential instance type by doing a switch statement in its "type" property
	- "type" property refers to the type of Credential instance (PasswordCredential, FederatedCredential, PublicKeyCredential)
 
// CODE
    }).then(c => {
      if (c) {
        switch (c.type) {
          case 'password':
            return sendRequest(c);
            break;
          case 'federated':
            return gSignIn(c);
            break;
        }
      } else {
        return Promise.resolve();
      }



Update the UI or proceed to the personalized page
 > if authentication was successful, update the UI or forward the user to the personalized page
 > if authentication failed, DONT FORGET to show an authentication error message

// AUTHENTICATION SUCCESS CODE
    }).then(profile => {
      if (profile) {
        updateUI(profile);
      }

// AUTHENTICATION FAIL CODE
    }).catch(error => {
      showError('Sign-in Failed');
    });
  }
}








III. SIGN OUT

// FULL CODE
signoutUser();
if (navigator.credentials && navigator.credentials.preventSilentAccess) {
  navigator.credentials.preventSilentAccess();
}


01. Signout
 	> for signout, we generally should
		- terminate a session
		- delete all information/data stored in the browser like JWT, etc

02. Turn off auto sign-in for future visits
	> to turn off auto sign-in after logout, we will call the 
		- `navigator.credentials.preventSilentAccess()`
 	> this will ensure the auto sign-in won't happen until the next time the user enables auto sign-in





IV. SIGN-IN VIA ACCOUNT CHOOSER

ACCOUNT CHOOSER
 > for sign-in, we can also show an account choose instead of showing a sign-in form, then let the user sign-in with just one tap

STEPS:
 > Show an account chooser
 > Get a credential information
 > Authenticate the user
 > Update UI or proceed to a personalized page

// FULL CODE
var signin = document.querySelector('#signin');
signin.addEventListener('click', e => {
  if (navigator.credentials) {
    navigator.credentials.get({
      password: true,
      federated: {
        provider: [
          'https://accounts.google.com'
        ]
      },
      mediation: 'optional'
    }).then(c => {
      if (c) {
        switch (c.type) {
          case 'password':
            return sendRequest(c);
            break;
          case 'federated':
            return gSignIn(c);
            break;
        }
      } else {
        return Promise.resolve();
      }
    }).then(profile => {
      if (profile) {
        updateUI(profile);
      } else {
        location.href = '/signin';
      }
    }).catch(error => {
      location.href = '/signin';
    });
  }
});



Show an account chooser
 > by calling `navigator.credentials.get()` with options input whose "mediation" property is "optional", we can show the account choose
 > once the user makes a selection of an account, you will receive a credential
 > NOTE: Dont forget to fallbakc to sign-in form

// CODE
var signin = document.querySelector('#signin');
signin.addEventListener('click', e => {
  if (navigator.credentials) {
    navigator.credentials.get({
      password: true,
      federated: {
        provider: [
          'https://accounts.google.com'
        ]
      },
      mediation: 'optional'
    }).then(c => {



Get a credential information
Authenticate the user
 > same as before, null check then a type check on the Credentials object received from Promise returned by navigator.credentails.get()

// CODE
.then(c => {
      if (c) {
        switch (c.type) {
          case 'password':
            return sendRequest(c);
            break;
          case 'federated':
            return gSignIn(c);
            break;
        }
      } else {
        return Promise.resolve();
      }
    })


Update UI or proceed to a personalized page
 > update UI based on Credentials authentication is successful
 > for failed signin, default to the signin form

// CODE
.then(profile => {
      if (profile) {
        updateUI(profile);
      } else {
        location.href = '/signin';
      }
    }).catch(error => {
      location.href = '/signin';
    });
  }
});










V. BEST PRACTICES

Best practices
1. Adding autocomplete attributes to <input> tags
	> specifically, we want to add "username" and "password" autocomplete attributes to the input that specifies it
 	> this helps the Credential Management API to find id and password from form and construct a credential object
		- ex: for email input, we want to add autocomplete="username" property
		- for password input tag, we want to add autocomplete="password"

2. Implement the auto-signin only in the pages/leafs that needs it	
	> ex: in an e-commerce, we dont to have the user signin just to see a product details

3. Do not forget to show a prompt for auto signed in pages when
	> authentication was successful
	> authentication failed