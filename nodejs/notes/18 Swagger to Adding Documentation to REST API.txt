Building Express REST API using Swagger

Contents:
01 Add Swagger UI to the ExpressJS API
02 Server Swagger page and Export Swagger docs as JSON
03 Use OpenAPI to define the API documentation
04 Import Swagger docs to Postman








01 Add Swagger UI to the ExpressJS API

Function/Objects/Types used
swaggerJsdoc.Options
 > Open API Specification (OAS) version 2.0 options (fka Swagger specification)

swaggerJsdoc(options: swaggerJsdoc.Options)
 > Returns validated Swagger specification in JSON format.


Add Swagger UI to the ExpressJS API
1. Install dependencies
	> swagger-jsdoc
	> swagger-ui-express
2. Enable resolveJsonModule setting in tsconfig.json
	> we will need the package.json later
3. Create "swagger.ts"
	> this will contain the definition of SwaggerDocs that we will create
 	> we will also create the function to add routing to serve both the Swagger UI page and Swagger docs as json


EX:
// swagger.ts
import { Express, Request, Response } from "express";
import swaggerJsdoc from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";

// Creating Swagger docs
const options: swaggerJsdoc.Options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "EZE Web App Backend REST API",
      version: "1.0.0",
    },
    components: {
      securitySchemas: {
        bearerAuth: {
          type: "http",
          scheme: "bearer",
          bearerFormat: "JWT",
        },
      },
    },
    security: [
      {
        bearerAuth: [],
      },
    ],
  },
  apis: ["./src/router/*.ts"],
};

// creating swagger specification
const swaggerSpec = swaggerJsdoc(options);

function swaggerDocs(app: Express, port: number) {
  // Server Swagger page
  app.use("/api/docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

  // Server Swagger Docs in JSON format
  app.get("/api/docs.json", (req: Request, res: Response) => {
    res.setHeader("Content-Type", "application/json");
    res.send(swaggerSpec);

    console.log(`Docs available at http://localhost:${port}/docs`);
  });
}

export default swaggerDocs;









02 Server Swagger page and Export Swagger docs as JSON

Function/Objects used
swaggerUi.serve
 > Returns handlers for serving Swagger UI files. This includes the custom initialization JS file and static files of Swagger UI.
 > @returns — Express handlers that process requests and return files for Swagger UI.

swaggerUi.setup(json: SwaggerDocJson)
 > Creates a middleware function that returns the pre-generated HTML file for the Swagger UI page.
 > Params
	- @param swaggerDoc — JSON object with the API schema.


Serving Swagger UI page and Export Swagger docs as JSON
 > to do so, we will need to use the swaggerUI's server property and setup function
 	
EX:
// inside swagger.ts
function swaggerDocs(app: Express, port: number) {
  // Server Swagger page
  app.use("/api/docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

  // Server Swagger Docs in JSON format
  app.get("/api/docs.json", (req: Request, res: Response) => {
    res.setHeader("Content-Type", "application/json");
    res.send(swaggerSpec);

    console.log(`Docs available at http://localhost:${port}/docs`);
  });
}

export default swaggerDocs;


// inside app.ts
import swaggerDocs from "./utils/swagger";
const port = parseInt(process.env.PORT as string);
swaggerDocs(app, port);










03 Use OpenAPI to define the API documentation

DOCUMENTATION SOURCE:
https://swagger.io/docs/specification/basic-structure/


Creating a Path specification
 > to create a path specification (or schema, etc), we will need to do the following	
	1. create a multiline comment
	2. add "@openapi" as the first line
	3. use the syntax for the Basic structure of the Path

paths:
  /users:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string








04 Import Swagger docs to Postman