01. Nagios

Monitoring Tool
	> used to AUTOMATICALLY monitor the application running
		- app is down
		- server down
		- "heartbeat" is present
			= some sort of ping being sent every set of time interval to let receiver know you are alive

Continuous Monitoring
	> Continuous Monitoring is a process to detect, report, and respond to all the attacks which occur in its infrastructure
	> Once the application is deployed into the server, the role of continuous monitoring comes into play.
	> The entire process is all about taking care of teh company's infrastructure and respond appropriately
	> typically done by the OPERATIONS TEAM in DevOps
	> example are	
		- data dog
		- nagios (free)
		- elk
		- splunk
			= alongside elk, mostly used for data science
		- prometeus
		- garfana


What is Nagios?
	> Nagios is a free to use open source software tool for continuous monitoring
	> it helps you monitor system, network, and infrastructure
	> It is used for continuous monitoring of systems, applications, service and business process in a DevOps culture
	> Nagios runs plugins stored on the same server
		- These plugins connects with a host or another server on your network or the Internet
	> With this, in the case of failure, Nagios core can ALERT the technical staff about the issues so that the they can perform recovery process before outage in the business processes.


Why we need Nagios?
1. Detects all types of network or server issues
2. Helps you to find the root cause of the problem which allows you to get the permanent solution to the problem
3. Active monitoring of your entire infrastructure and business processes
4. Allows you to monitor and troubleshoot server performance issues
5. Helps you to plan for infrastructure upgrades before outdated systems create failures
6. Helps to maintain the security and availablity of the service
7. Can be configured to AUTOMATICALLY fix problems in a panic situation



Nagios Architecture
	> Nagios is a client-server architecture
	> Usually, on a network, a Nagios server is running on a host, and plugins are running on all the remote hosts which should be monitored
	> composed of the following components
		1. Nagios Server
			- contains the Nagios Core
				- Nagios Core then contains Process Scheduler
			- Process Schedule sends signals to execute the plugins at the remote host
		2. Nagios Web Interface
			- provides GUI for the User
		3. Remote Host
			- contains the Nagios Plugins


Nagios Process
1. The scheduler is a component of server part of Nagios. It sends a signal to execute the plugins at the remote host
2. The plugin gets the status from the remote host
3. The plugin sends the data to the process scheduler of Master Server's Nagios Core
4. The process scheduler updates the GUI and notifications are sent to admins



Nagios Plugins
	> Nagios Plugins provide low-level intelligence on how to monitor anything and everything with Nagios Core
	> Plugins operate/acts as a standalone application, but they are designed to be executed by Nagios Core
	> In essence, these Plugins acts as Monitoring Abstraction Layer that is SEPARATED to the Monitoring Logic (Nagios Core)
	> It connects to Apache that is controlled by CGI to display the result
	> Moreover, a database is connected to Nagios to keep a log file


Use cases of Plugins
	-> NRPE (plugin for Linux servers) can be used to check status of the Linux remote servers
	-> NSClient+ (plugin for Window servers) can be used to fetch data in Window remote servers


Example Usage
Setup
1. check_nt is installed in Monitoring server along side Nagios core
2. NSClient+ is installed in Windows Remote Machine

Process
1. Check_nt is a plugin to monitor a windows machine which is mostly available in the monitoring server
2. NSClient++ should be installed in every Windows machine that you wants to monitor. Information you can monitor includes
	- CPU
	- Memory
	- Disk space
	- Processes
	- Services
3. There is an SSL connection between the server and the host which continuously exchange information with each other



Nagios GUI
	> An interface of Nagios is used to display in web pages generated by CGI
	> It can be buttons to green or red, source, graph, etc
	> When the soft alert is raised many times, a hard alert is raised
	> This then trigger the Nagios Server to send a notification to the administrator or contact of the said Host



NAGIOS CORE INSTALLATION
1. Connect to Ubuntu 1 Server
2. Change to root user (IMPORTANT)
	sudo su
3. Install prerequisite softwares (apache2, php, etc..)
	apt update
	sudo apt install wget build-essential apache2 php libapache2-mod-php7.2 php-gd libgd-dev unzip postfix
		- press enter multiple times when prompted with something

Create user and group for Nagios and add them to Apache www-data user
4. Add nagios user and nagcmd group
	$ useradd nagios
	$ groupadd nagcmd
5. Add nagios user in nagcmd group
	$ usermod -a -G nagcmd nagios
	$ usermod -a -G nagios,nagcmd www-data

Downloading and Installing Nagios
6. Download Nagios Core using wget
	$ wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.2.0.tar.gz
7. Extract Nagios core 
	$ tar -xzf nagios*.tar.gz
8. Go inside the new folder
	cd nagios-4.2.0
9. OPTIONAL (change hostname to nagios)
	hostname nagios-server
	vi /etc/hostname	-> i dont know what the fck youre suppose to edit here since trainer skipped this step
	bash
10. Compile Nagios from source code inside nagios-4.2.0 folder
	./configure --with-nagios-group=nagios --with-command-group=nagcmd
11. Build Nagios files
	make all
12. Install all the Nagios file
	sudo make install

Installing init and external command configuration files
13. Install commandmode, init and external cmmand configuration files
	sudo make install-commandmode
	sudo make install-init
	sudo make install-config
	sudo /usr/bin/install -c -m 644 sample-config/httpd.conf /etc/apache2/sitesavailable/nagios.conf
14. Copy eventhandler directory to the nagios directory and change ownership of file to the new user and group "nagios"
	$ cp -R contrib/eventhandlers/ /usr/local/nagios/libexec/
	$ chown -R nagios:nagios /usr/local/nagios/libexec/eventhandlers


NAGIOS PLUGIN INSTALLATION
15. Go outside the nagios-4.2.0 folder
	cd ..
	cd /home/ubuntu/	-> other option
16. Download the nagios-plugin package
	$ wget https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz
17. Extract the .tar.gz file
	$ tar -xzf nagios-plugins*.tar.gz
18. Go inside the folder of extraction output
	cd nagios-plugins-2.2.1
19. Compile nagios plugin source code using configure command inside the folder
	$ ./configure --with-nagios-user=nagios --with-nagios-group=nagios --with-openssl
20. Build Nagios plugin
	make
21. Install all the Nagios plugin files
	make install


MODIFY NAGIOS CONFIGURATION
22. Edit the nagios.cfg file
	$ nano -c /usr/local/nagios/etc/nagios.cfg
23. Uncomment line 51
	> for the host monitor configuration
24. Edit the contacts.cfg file
	sudo gedit /usr/local/nagios/etc/objects/contacts.cfg
25. Change email of the "nagiosadmin" contact
	> change to the email where you want the notifications to be sent
	exampleemail@gmail.com

26. Add a new folder named servers.
	$ mkdir -p /usr/local/nagios/etc/servers

27. Change the user and group ownership of the new folder to "nagios"
	$ chown nagios:nagios /usr/local/nagios/etc/servers

28. Enable Apache modules
	$ sudo a2enmod rewrite
	$ sudo a2enmod cgi

29. Configure user "nagiosadmin", SPECIFY THE PASSWORD of user "nagiosadmin"
	$ sudo htpasswd -c /usr/local/nagios/etc/htpasswd.users nagiosadmin

30. Enable the Nagios virtual host
	$ sudo ln -s /etc/apache2/sites-available/nagios.conf /etc/apache2/sites-enabled/

31. Restart Apache
	$ service apache2 restart

32. Restart Nagios
	$ cd /etc/init.d/
	$ cp /etc/init.d/skeleton /etc/init.d/nagios

33. Edit Nagios file
	$ nano /etc/init.d/nagios

34. Paste the following text
DESC="Nagios"

NAME=nagios

DAEMON=/usr/local/nagios/bin/$NAME

DAEMON_ARGS="-d /usr/local/nagios/etc/nagios.cfg"

PIDFILE=/usr/local/nagios/var/$NAME.lock


35. Make the Nagios file executable
	$ chmod +x /etc/init.d/nagios

36. Restart the Apache2 
	$ service apache2 restart

37. Edit nagios.service
	$ nano /etc/systemd/system/nagios.service

38. Paste this inside nagios.service
[Unit]

Description=Nagios

BindTo=network.target



[Install]

WantedBy=multi-user.target



[Service]

User=nagios

Group=nagios

Type=simple

ExecStart=/usr/local/nagios/bin/nagios /usr/local/nagios/etc/nagios.cfg


39. Enable nagios.service
	$ systemctl enable /etc/systemd/system/nagios.service

40. Start the nagios service again
	$ service nagios start

41. Check status of nagios service
 	$ service nagios status

42. Install htop to monitor the local machine's memory
	$ apt install htop 

43. Access the Nagios Core Dashboard
	> use the public ip of the Ubuntu Server you are working (for remote host) 
	> use localhost if you are accessing it in same machine
	> then attach "/nagios" at the end

	http://3.110.100.216/nagios/

44. Use the credential we set in step 29
	> username = "nagiosadmin"
	> password = the password you pass in step 29


45. Check Host section
	> we should see the "localhost", which is the machine the Nagios Core is currently installed, and its informations
	> but monitoring only the machine where Nagios Core is running does not make sense
	> so in next topic, we will learn how to install NRPE plugin in a remote host



