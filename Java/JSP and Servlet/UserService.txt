package com.service;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import com.db.DAO;
import com.executors.AppExecutors;
import com.model.User;

public class UserService {
	private DAO dao;
	private static UserService instance;

	private UserService() {
		dao = new DAO();
	}

	public static UserService getInstance() {
		if (instance == null) {
			instance = new UserService();
			return instance;
		}
		return instance;
	}

	public boolean createUser(User user) {
		Future<Boolean> future = AppExecutors.getInstance().getDiskIO().submit(new CreateUserCallable(user, dao));

		try {
			return future.get();
		} catch (InterruptedException | ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}

	}

	public boolean updateUser(List<String> updates, Integer id) {
		Future<Boolean> future = AppExecutors.getInstance().getDiskIO()
				.submit(new UpdateUserCallable(updates, id, dao));

		try {
			return future.get();
		} catch (InterruptedException | ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}

	}

	// For Login
	public User getUserDetails(String uname, String pass) {
		String query = "SELECT users.id AS id, " + "users.username AS username, " + "users.password AS password, "
				+ "users.date_created AS date_created, " + "COUNT(accounts.account_number) AS number_of_accounts, "
				+ "GROUP_CONCAT(accounts.account_number SEPARATOR ',') AS list_of_accounts, "
				+ "SUM(accounts.account_balance) AS total_balance, " + "users.contact_number AS contact_number "
				+ "FROM users INNER JOIN accounts " + "ON users.username = accounts.username "
				+ "WHERE users.username=? AND users.password=? " + "LIMIT 1; ";
		try (Connection conn = dao.getConnection(); PreparedStatement pstmt = conn.prepareStatement(query);) {
			pstmt.setString(1, uname);
			pstmt.setString(2, pass);
			ResultSet rs = pstmt.executeQuery();
			System.out.println("Getting users");
			if (rs.next()) {
				System.out.println("Iterating users found");
				String username = rs.getString("username");
				String password = rs.getString("password");
				Integer id = rs.getInt("id");
				LocalDateTime date_created = User.stringToDate(rs.getString("date_created"));
				Integer number_of_accounts = rs.getInt("number_of_accounts");
				Integer total_balance = rs.getInt("total_balance");
				String list_of_accounts = rs.getString("list_of_accounts");
				String contact_number = rs.getString("contact_number");

				User user = new User(id, username, password, date_created, number_of_accounts, list_of_accounts,
						total_balance, contact_number);
				System.out.println("Returning a user");
				return user;
			} else {
				System.out.println("Returning null");
				return null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("returning null");
			return null;
		}
	}
	
	public User getUser(String uname, String pass) {
		String query = "SELECT * FROM users WHERE username=? AND password=?";
		try (Connection conn = dao.getConnection(); PreparedStatement pstmt = conn.prepareStatement(query);) {
			pstmt.setString(1, uname);
			pstmt.setString(2, pass);
			ResultSet rs = pstmt.executeQuery();
			System.out.println("Getting users");
			if (rs.next()) {
				System.out.println("Iterating users found");
				String username = rs.getString("username");
				String password = rs.getString("password");
				Integer id = rs.getInt("id");
				LocalDateTime date_created = User.stringToDate(rs.getString("date_created"));
				Integer number_of_accounts = rs.getInt("number_of_accounts");
				Integer total_balance = rs.getInt("total_balance");
				String list_of_accounts = rs.getString("list_of_accounts");
				String contact_number = rs.getString("contact_number");

				User user = new User(id, username, password, date_created, number_of_accounts, list_of_accounts,
						total_balance, contact_number);
				System.out.println("Returning a user");
				return user;
			} else {
				System.out.println("Returning null");
				return null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("returning null");
			return null;
		}
	}
	}

	public boolean deleteUser(Integer id) {
		Future<Boolean> future = AppExecutors.getInstance().getDiskIO().submit(new DeleteUserCallable(id, dao));
		try {
			return future.get();
		} catch (InterruptedException | ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}

	public boolean updateTotalBalance(Integer id, Integer totalBalance) {
		Future<Boolean> future = AppExecutors.getInstance().getDiskIO()
				.submit(new UpdateTotalBalanceCallable(id, totalBalance, dao));

		try {
			return future.get();
		} catch (InterruptedException | ExecutionException e) {
			e.printStackTrace();
			return false;
		}
	}

	private static class GetUserDetailsCallable implements Callable<User> {
		private String username;
		private String password;
		private DAO dao;

		public GetUserDetailsCallable(String username, String password, DAO dao) {
			super();
			this.username = username;
			this.password = password;
			this.dao = dao;
		}

		@Override
		public User call() throws Exception {
			// TODO Auto-generated method stub
			String query = "SELECT users.id AS id, " + "users.username AS username, " + "users.password AS password, "
					+ "users.date_created AS date_created, " + "COUNT(accounts.account_number) AS number_of_accounts, "
					+ "GROUP_CONCAT(accounts.account_number SEPARATOR ',') AS list_of_accounts, "
					+ "SUM(accounts.account_balance) AS total_balance, " + "users.contact_number AS contact_number "
					+ "FROM users INNER JOIN accounts " + "ON users.username = accounts.username "
					+ "WHERE users.username=? AND users.password=? " + "LIMIT 1; ";
			try (Connection conn = dao.getConnection(); PreparedStatement pstmt = conn.prepareStatement(query);) {
				pstmt.setString(1, username);
				pstmt.setString(2, password);
				ResultSet rs = pstmt.executeQuery();
				System.out.println("Getting users");
				if (rs.next()) {
					System.out.println("Iterating users found");
					String username = rs.getString("username");
					String password = rs.getString("password");
					Integer id = rs.getInt("id");
					LocalDateTime date_created = User.stringToDate(rs.getString("date_created"));
					Integer number_of_accounts = rs.getInt("number_of_accounts");
					Integer total_balance = rs.getInt("total_balance");
					String list_of_accounts = rs.getString("list_of_accounts");
					String contact_number = rs.getString("contact_number");

					User user = new User(id, username, password, date_created, number_of_accounts, list_of_accounts,
							total_balance, contact_number);
					System.out.println("Returning a user");
					return user;
				} else {
					System.out.println("Returning null");
					return null;
				}
			} catch (SQLException e) {
				e.printStackTrace();
				System.out.println("returning null");
				return null;
			}
		}
	}

	private static class CreateUserCallable implements Callable<Boolean> {

		private User user;
		private DAO dao;

		public CreateUserCallable(User user, DAO dao) {
			super();
			this.user = user;
			this.dao = dao;
		}

		@Override
		public Boolean call() throws Exception {
			String query = "INSERT INTO users(username,password,date_created,contact_number)" + "VALUES(?,?,?,?)";
			try {
				Connection conn = dao.getConnection();
				PreparedStatement pstmt = conn.prepareStatement(query);
				pstmt.setString(1, user.getUsername());
				pstmt.setString(2, user.getPassword());
				pstmt.setString(3, User.dateToString(user.getDate_created()));
				pstmt.setString(4, user.getContact_number());
				int row = pstmt.executeUpdate();
				if (row > 0) {
					return true;
				} else {
					return false;
				}
			} catch (SQLException e) {
				e.printStackTrace();
				return false;
			}
		}
	}

	private static class UpdateUserCallable implements Callable<Boolean> {

		private List<String> updates;
		private Integer id;
		private DAO dao;

		public UpdateUserCallable(List<String> updates, Integer id, DAO dao) {
			super();
			this.updates = updates;
			this.id = id;
			this.dao = dao;
		}

		@Override
		public Boolean call() throws Exception {
			// TODO Auto-generated method stub
			try (Connection conn = dao.getConnection();) {
				for (String update : updates) {
					System.out.println("Updating the User");
					String[] property = update.split(":");
					String query = "UPDATE users SET " + property[0] + "=? WHERE id=" + id;
					PreparedStatement pstmt = conn.prepareStatement(query);
					System.out.println(property[0] + " " + property[1]);
					if (property[0].equals("total_balance") || property[0].equals("number_of_accounts")) {
						pstmt.setInt(1, Integer.valueOf(property[1]));
					} else {
						pstmt.setString(1, property[1]);
					}
					int row = pstmt.executeUpdate();
					if (row < 0) {
						return false;
					}
				}
				return true;
			} catch (SQLException e) {
				e.printStackTrace();
				return false;
			}
		}

	}

	private static class DeleteUserCallable implements Callable<Boolean> {
		private Integer id;
		private DAO dao;

		public DeleteUserCallable(Integer id, DAO dao) {
			super();
			this.id = id;
			this.dao = dao;
		}

		@Override
		public Boolean call() throws Exception {

			String query = "DELETE FROM users WHERE id=?";
			try (Connection conn = dao.getConnection(); PreparedStatement pstmt = conn.prepareStatement(query);) {
				pstmt.setInt(1, id);
				int row = pstmt.executeUpdate();
				if (row > 0) {
					return true;
				} else {
					return false;
				}
			} catch (SQLException e) {
				e.printStackTrace();
				return false;
			}
		}

	}

	public static class UpdateTotalBalanceCallable implements Callable<Boolean> {
		private Integer id;
		private Integer totalBalance;
		private DAO dao;

		public UpdateTotalBalanceCallable(Integer id, Integer totalBalance, DAO dao) {
			super();
			this.id = id;
			this.totalBalance = totalBalance;
			this.dao = dao;
		}

		@Override
		public Boolean call() throws Exception {
			String query = "UPDATE users SET total_balance=? WHERE id=" + id;
			try (Connection conn = dao.getConnection(); PreparedStatement pstmt = conn.prepareStatement(query);) {
				pstmt.setInt(1, totalBalance);
				int row = pstmt.executeUpdate();
				if (row > 0) {
					return true;
				} else {
					return false;
				}
			} catch (SQLException e) {
				e.printStackTrace();
				return false;
			}
		}
	}

	private static class GetUserCallable implements Callable<User> {
		private String user;
		private String pass;
		private DAO dao;

		public GetUserCallable(String username, String password, DAO dao) {
			super();
			this.user = username;
			this.pass = password;
			this.dao = dao;
		}

		@Override
		public User call() throws Exception {
			// TODO Auto-generated method stub
			String query = "SELECT * FROM users WHERE username=? AND password=?";
			try (Connection conn = dao.getConnection(); PreparedStatement pstmt = conn.prepareStatement(query);) {
				pstmt.setString(1, user);
				pstmt.setString(2, pass);
				ResultSet rs = pstmt.executeQuery();
				System.out.println("Getting users");
				if (rs.next()) {
					System.out.println("Iterating users found");
					String username = rs.getString("username");
					String password = rs.getString("password");
					Integer id = rs.getInt("id");
					LocalDateTime date_created = User.stringToDate(rs.getString("date_created"));
					Integer number_of_accounts = rs.getInt("number_of_accounts");
					Integer total_balance = rs.getInt("total_balance");
					String list_of_accounts = rs.getString("list_of_accounts");
					String contact_number = rs.getString("contact_number");

					User user = new User(id, username, password, date_created, number_of_accounts, list_of_accounts,
							total_balance, contact_number);
					System.out.println("Returning a user");
					return user;
				} else {
					System.out.println("Returning null");
					return null;
				}
			} catch (SQLException e) {
				e.printStackTrace();
				System.out.println("returning null");
				return null;
			}
		}

	}
}
