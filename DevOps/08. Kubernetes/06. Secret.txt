06. Secrets

includes:
I. Kubernets Secrets
II. Secrets property
III. Creating Secret
IV. Displaying Secret data
V. Validate the Secret addition
VI. Deleting Secret



I. Kubernets Secrets
	> let you store and manage sensitive information, such as
		- password	
		- OAuth tokens
		- ssh keys
	> storing confidential information in a Secret is SAFER and more FLEXIBLE than putting it verbatim in a Pod definition or in a Container Image
	> work similarly with ConfigMap but for SENSITIVE DATA
	> when consumed by a Pod, secret will be decoded
	
II. Secrets property
	> uses Base64 algorithm to encode the data
	> mapped to Pod where these are decoded on Pod level
	> stores the data in Key-Value pair
	> command flag for creating Secret can have command flags 
		1. "--from-file"	for adding files as Secret data
		2. "--from-literal"	for adding key-value pair as Secret data
	> Secret data is stored in etcd database



III. Creating Secret
	> we can create Secrets by either
		a. kubectl commands
		b. K8s manifest

A. kubectl command
kubectl create secret generic <NAME> [--from-file=<SOURCE FILE>] [--from-literal=<key>=<value>]
	> used to create a Secret
	> "--from-file" command flag specifies the source file of the Secret that contains key=value pairs
		- will read each line for key=value pairs
	> "--from-literal" command flag specifies the key-value pair to be included in the Secret

B. K8s manifest
	> to create a Secret from Manifest file, we will use the command
		kubectl create -f <MANIFEST FILE>
	> in creating a Manifest file for Secret, it must have the following
		1. kind: 
			- must be Secret
		2. type: 
			- must have a value "Opaque"
		3. data:
			- contains either
				a. property-like keys
					- each key maps to a simple value
					- similar to a "--from-literal" command flag of "kubectl create secret"
				b. file-like keys
					- similar to the "--from-file" command flag of "kubectl create secret"
			- NOTE: the values in the key=value pair MUST BE ENCODED in Base64 algorithm first if you plan to use 


EX:
# Encoding secret
echo -n 'admin' | base64
echo -n 'pa$$w00rd' | base64

# redis-secret-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret-env
type: Opaque
data:
  username: YWRtaW4=
  password: cGEkJHcwMHJk

	 

IV. Displaying Secret data
kubectl get secret
	> used to display all secrets

kubectl describe secret <SECRET NAME>
	> used to display all information of a specific Secret



Consuming Secret as Environment variables
	> to consume Secret as Env Variables, we must do the following steps in the Manifest File
		1. Define an env: field inside a container of containers:
		2. Inside a env:, we must define the following fields
			a. name: 		string that will be used to refer to this env var inside Container
			b. valueFrom:		defines the source of the environment variable
		3. Inside valueFrom:, we must define the following fields
			a. secretKeyRef: 	specifies that the source is from Secret
		4. Inside secretKeyRef:, we must define the the following fields
			a. name: 		refers to the name of Secret in K8s cluster
			b. key:			refers to the key of a key-value pair we added in the Secret

EX:
Pod's manifest file that consumes a Secret as ENV

# redis-pod-secret-env.yaml
apiVersion: v1
kind: Pod
metadata:
  name: redis-pod-secret-env
spec:
  containers:
  - name: redis-container
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: redis-secret-env
            key: username
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: redis-secret-env
            key: password
  restartPolicy: Never

	> in this Manifest file, we created TWO ENVIRONMENT VARIABLES
	> 1st env var:		
		- name is SECRET_USERNAME
		- fetching the value from Secret "redis-secret-env" whose key is "username"
	> 2nd env var:		
		- name is SECRET_PASSWORD
		- fetching the value from Secret "redis-secret-env" whose key is "password"


V. Validate the Secret addition
1. Inside Pod
	a. Print all environment variables and filter secret using grep the env var with "SECRET"
		kubectl exec redis-pod-secret-env -it /bin/sh
		env | grep  SECRET
2. Outside Pod
	a. Fetch encoded values of Secret
		kubectl get secret redis-secret-env -o yaml
	b. Decode a value inside using base64 algorithm
		echo 'cGEkJHcwMHJk' | base64 --decode


VI. Deleting Secret
kubectl delete <RESOURCE TYPE> <RESOURCE NAME...>
kubectl delete secret <NAME...>
	> used to delete a Secret