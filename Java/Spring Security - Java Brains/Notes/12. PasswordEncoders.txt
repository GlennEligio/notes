Password Encryption using BCryptEncoder

HOW TO USE PasswordEncryption

1. Create a @Bean that returns a PasswordEncoder
	> Since PasswordEncoder is an Interface we will have to return one of its implementations
	
Some of the Implementations of PasswordEncoder interface

NoOpPasswordEncoder
	> password encoder that does NOTHING
	> for testing purposes only
	> not recommended in Production / Real-Time projects

BCryptPasswordEncoder
	> recommended password encoder of Spring Security
	> uses bcrypt encryption, which does the following
		- add "salt", some random string to the original text
		- hashes them to encrypt

LdapShaPasswordEncoder
	> used for ldap password
	> uses SHA for encoding/decoding password

DelegatingPasswordEncoder
	> A password encoder that delegates to another PasswordEncoder based upon a prefixed identifier.
	> general format for a password used for this implementation is

		 {id}encodedPassword

	> the id corresponds to a specific PasswordEncoder implementations
	> here are some of the ids used
		{bcrypt}
 		{noop}	
		{pbkdf2}
 		{scrypt}
 		{sha256}



Typically, as long as you define a PasswordEncoder @Bean in a @Configuration or @SpringBootApplication Class, the Spring Security will fetch that and automatically use it for password encoding and decoding. But in case you have two different @Bean for PasswordEncoder and you want to you a specific one, go to step 2.



2. Specify in the AuthenticationManagerBuilder which passwordEncoder to use
	> Inject a PasswordEncoder into the WebSecurityConfigurerAdapter Class
	> Finalize configuration of the AuthenticationManagerBuilder
		- you do this by calling methods like
			userDetailsService()
			inMemoryAuthentication()
			jdbcAuthentication()
			ldapAuthentication
		- if you use a custom AuthenticationProvider by calling authenticationProvide(), you will have to implement the PasswordEncoder logic in it
	> call passwordEncoder() and pass the PasswordEncoder to it.
			
