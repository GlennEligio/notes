Section 22 - Kubernetes Concepts

122: PODs

PODs - Assumptions
 > before we discuss and demo the Kubernetes pods, we assume that 
	1. We already have the application prepared, and the Docker image of it published in public docker registry like DockerHub
	2. We already have Kubernetes cluster setup locally
	
Pods
 > we can think of pods as a wrapper for containers within Kubernetes cluster
	- k8s does not directly create containers inside the worker nodes
 > Pods are considered the smallest unit or object that we can create in Kubernetes
	- even if Pods contains containers, we still refer the Pod as the smallest
 > Pods can encapsulate one or more containers
 

Scaling with Pods
 > if we want to scale the applications inside Kubernetes cluster, we will be spinning up new PODs, which host the same application instance inside instead of creating new instances of application on same POD
 > ex:
	WRONG:	
		[POD 1 => APP1, APP2]
	CORRECT:
		[POD 1 => APP1]	[POD 2 => APP1]
 > if a worker node cannot accomodate additional PODs when scaling up, a new PODs will be created in a different NODE
	- ex:
		[NODE1 => POD1 => APP1] [NODE2 => POD2 => APP1]
		

Multi-container Pods
 > in k8s, Pods are not limited to have only one container inside them
 > in cases where multiple container is inside a Pod, these container typically host DIFFERENT services/application
 > example of this is where Pod contains main container, and a helper container
	- this helper container may be a service that 
		a. reads the files and process them
		b. collects the logs generated by main container and passes them somewhere
		c. can even be a database that stores data of main container
 > in case of multi-container pods, all of the containers within the pod can refer/communicate to each other using 'localhost'
	- this is because container within the same Pod share the same network space, plus they can easily share the same storage space


Advantages of Pods
1. Communication between the container instances of services or application can easily be done
	> if we we're to do this in traditional docker way, we will need to manually link each of the container of image A to all containers of image B
	> with Kubernetes, we can easily redirect request to a specific group of containers


Using kubectl to initialize pods in cluster
 > to create a new pod inside k8s, we can use the 'kubectl run' command, and specify the --image flag value
	- ex: $ kubectl run nginx --image nginx
 > to check the newly created pod, use 'kubectl get pods'
	
	
COMMANDS:
kubectl run PODNAME --image IMAGE
 > used to run specific Pods using specific image inside
 > ex:
	$ kubectl run nginx --image nginx
kubectl get pods
 > list all the pods in cluster, along with some information about it
 > information includes
	- pod name
	- ready status
	= status
	- restarts
	- age
	

NOTES:
1. Typically, PODs only contain one container of same application/service inside. This is so that we can easily scale them up or down
2. When scaling an application inside k8s cluster, we do not create additional container inside a Pod. Instead, we just create new Pods with same application container inside




123: Demo - PODs

HISTORY
kubectl run nginx --image nginx
kubectl get pods
kubectl describe pod nginx
kubectl get pods -o wide

COMMANDS
kubectl describe pod PODNAME
 > used to describe pod of specific name
 > provides more information than kubectl get pods
 > information includes
	- node where the pod is hosted
	- start time
	- internal ip address of pod
	- containers inside pod
	- image of the containers
	- events

kubectl get pods -o wide
 > list all the pods, including the node where the pod is hosted, and the internal ip address assigned to it




124: A note about creating Pods

A note about creating pods using kubectl run.

To create a pod from the command line, use the command:

Create an NGINX Pod

kubectl run nginx --image=nginx

As of version 1.18, kubectl run (without any arguments such as --generator ) will create a pod instead of a deployment.

To create a deployment using imperative command, use kubectl create:

kubectl create deployment nginx --image=nginx

Kubernetes Concepts - https://kubernetes.io/docs/concepts/

Pod Overview- https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/