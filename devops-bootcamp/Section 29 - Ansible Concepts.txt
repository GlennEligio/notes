Section 29 - Ansible Concepts

156. Ansible Inventory

How Ansible orchestrate target machines
 > for Ansible to work, the controller (who have Ansible installed) needs to connect to target machines
	- for Linux it is done through SSH
	- for Windows it is done through Powershell Remoting
 > for this reason, this make the Ansible 'agentless'
	- this means it does not need to install additional software in the target machine in order to work
 > in order to know which machines to control/orchestrate, Ansible uses the 'inventory' file
 
inventory file
 > this inventory file contains the information about the target machines, and is used for connecting to it
 > if no inventory file is passed on 'ansible' commands, it will use the one located under '/etc/ansible/hosts' file
 > inventory file typically is written like an INI format, where it contains a list of servers 
 > we can also group them by adding [GROUPNAME] before a list of servers
	- in example below server3 and server4 are grouped under 'mail', server5 and 6 under 'db', server7 and 8 under 'web', and server 1 and 2 being ungrouped
	
EX: inventory file
server1.company.com
server2.company.com

[mail]
server3.company.com
server4.company.com

[db]
server5.company.com
server6.company.com

[web]
server7.company.com
server8.company.com


More on inventory files - Inventory Parameters
 > to customize the servers listed in the inventory file, we can provide inventory parameters
 > below are the list of inventory parameters, and some example values
	1. ansible_host
	2. ansible_connection - ssh/winrm/localhost
	3. ansible_port - 22 (default) /5986
	4. ansible_user - root (default) /administrator
	5. ansible_ssh_pass - Password
	6. ansible_password - Password
 > ansible_host is used to specify the FQDN or IP address of the server
	- we typically use this whenever we assign an 'alias' to a server
	- in example below, we set the alias of server1.company.com to 'web', and using ansible_host, we can specify the ip address where that alias is pointing
 > ansible_connection is used to specify how the controller will connect to the server
	- either ssh if Linux server, or winrm if Windows server
 > ansible_port is used to define the port to use for connection
	- by default, it is set to 22 if not defined
 > ansible_user is used to define the user to be used for connecting
	- by default, it is set to root
 > ansible_ssh_pass is used to define the ssh password to be used for connecting to Linux machine
 > ansible_password is used to define the password to be used for connecting to Windows machine
	
EX: inventory file
web		ansible_host=server1.company.com	ansible_connection=ssh 	ansible_user=root
db		ansible_host=server2.company.com	ansible_connection=winrm	ansible_user=admin
mail	ansible_host=server3.company.com	ansible_connection=ssh		ansible_ssh_pass=P@#
web2	ansible_host=server4.company.com	ansible_connection=winrm

localhost 	ansible_connection=localhost



NOTES:
1. A disadvantage of some orchestration tools is that you need to configure agents on target machine before you can invoke any kind of automation
2. Storing password for inventory file in hardcoded way is not ideal
	> the best practice is to set up SSH-key based passwordless authentication between the servers
	> recommended to do in a production or corporate environment
3. If we want to just test or play with ansible, we can use the same machine as the controller for testing
	> to do so, create an entry in inventory file with alias 'inventory', and ansible_connection=localhost
4. We can use alias when grouping servers instead of the FQDN

EX:
# SAMPLE INVENTORY FILE
web		ansible_host=server1.company.com	ansible_connection=ssh 	ansible_user=root
db		ansible_host=server2.company.com	ansible_connection=winrm	ansible_user=admin
mail	ansible_host=server3.company.com	ansible_connection=ssh		ansible_ssh_pass=P@#
web2	ansible_host=server4.company.com	ansible_connection=winrm

[web_servers]
web1
web2

[mail_servers]
mail

[database_servers]
db



157. Lab - Inventory - File

#1
In this lab exercise, you will use below hosts. Please note down some details about these hosts as given below:
student-node :- This host will act as an Ansible master node where you will create playbooks, inventory, roles etc, and you will be running your playbooks from this host itself.

node01 	:- This host will act as an Ansble client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this hosts:
	User: bob
	Password: caleston123
	
node02	:- This host will also act as an Ansible client/remote host where you will setup/instal some stuff using Ansible playbooks. Below are the SSH credentails for this host:
	User: bob
	Password: caleston123
	
Note: Please type exit or logout on th terminal or press CTRL+d to logout from a specific node
	

#2 
Q: Look into the given sample inventory, which of the following formats this inventory is using?

web ansible_host=webserver.com
db ansible_host=dbserver.com

A: ini


#3
Q: Which of the following ports Ansible uses by default to connect to the Linux remote hosts?
A: 22

#4
Q: Which of the following inventory parameters can be used to establish a local connection instead of ssh in Ansible?
A: ansible_connection

#5
Q: What value we must set for 'ansible_connection' paramter to connect to a Windows server?
A: winrm

#6
Q: We have a sample inventory file called 'inventory' under /home/bob/playbooks directory. It has 3 servers listed, add another server called 'server4.company.com' in this file.
S:
1. vi /home/bob/playbooks/inventory
2. Add server4.company.com inside

# Sample Inventory File
  
server1.company.com
server2.company.com
server3.company.com
server4.company.com

3. Save file


#7
Q: We have reset the '/home/bob/playbooks/inventory' inventory file, and added the aliases named web1, web2, and web3 for the first three hosts respectively. Update this inventory file to add an alias called db1 for server4.company.com host
S: 
1. vi /home/bob/playbooks/inventory
2. Add the following to make the file below

# Sample Inventory File

web1 ansible_host=server1.company.com
web2 ansible_host=server2.company.com
web3 ansible_host=server3.company.com
db1  ansible_host=server4.company.com

3. Save file


#8
Q: As per the details given in the table below, you can see that, the web servers are linux based hosts and the db server is a Windows machine. Update the inventory /home/bob/playbooks/inventory to add a similar entry for server4.company.com host. Find the required details from the table below
---------------------------------------------------------------------------
|  Alias |        HOST         | Connection | User          | Password     | 
---------------------------------------------------------------------------
|  web1  | server1.company.com |    ssh     | root          | Password123! |
---------------------------------------------------------------------------
|  web2  | server2.company.com |    ssh     | root          | Password123! |
---------------------------------------------------------------------------
|  web3  | server3.company.com |    ssh     | root          | Password123! |
---------------------------------------------------------------------------
|  db1   | server4.company.com |    winrm   | administrator | Dbp@ss123!   |
---------------------------------------------------------------------------
NOTE:
For linux based hosts, use ansible_ssh_pass parameter and for Windows based hosts, use ansible_password parameter
S: Edit /home/bob/playbooks/inventory file using vim, and create entry for db1 alias
A:
# Sample Inventory File

# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
db1  ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Dbp@ss123!


#9
Q: We have updated the /home/bob/playbooks/inventory file and added a group called 'web_servers' for web servers. Similarly, add a group caled 'db_servers' for database servers.
S: Edit /home/bob/playbooks/inventory and add additional contents to make it similar to below

# Sample Inventory File
  
# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!

# Database Servers
db1 ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Password123!


[web_servers]
web1
web2
web3

[db_servers]
db1


#10
Q: Let us now create a group of groups. Create a new group called 'all_servers' and add the previously created grouped 'web_servers' and 'db_servers' under it
NOTE: Syntax would be as follows - 
[parent_group:children]
child_group1
child_group2
S: Edit the /home/bob/playbooks/inventory to make it similar to the one below

# Sample Inventory File
  
# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web3 ansible_host=server3.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!

# Database Servers
db1 ansible_host=server4.company.com ansible_connection=winrm ansible_user=administrator ansible_password=Password123!


[web_servers]
web1
web2
web3

[db_servers]
db1

[all_servers:children]
db_servers
web_servers



#11
Q: Update the /home/bob/playbooks/inventory file to represent the data given in the below table in Ansible Inventory format
-------------------------------------------------------------------
| Server Alias |  Server Name  |  OS    |     User      | Password |
-------------------------------------------------------------------
| sql_db1      | sql01.xyz.com | Linux  |     root      | Lin$Pass |
-------------------------------------------------------------------
| sql_db2      | sql02.xyz.com | Linux  |     root      | Lin$Pass |
-------------------------------------------------------------------
| web_node1    | web01.xyz.com | Win    | administrator | Win$Pass |
-------------------------------------------------------------------
| web_node2    | web02.xyz.com | Win    | administrator | Win$Pass |
-------------------------------------------------------------------
| web_node3    | web03.xyz.com | Win    | administrator | Win$Pass |
-------------------------------------------------------------------

Group the servers together based on this table
--------------------------------------------------------
|    Group         |  Members                          |
--------------------------------------------------------
|    db_nodes      |  sql_db1, sql_db2                 |
--------------------------------------------------------
|   web_nodes      |  web_node1, web_node2, web_node3  |
--------------------------------------------------------
|    boston_nodes  |  sql_db1, web_node1               |
--------------------------------------------------------
|    dallas_nodes  |  sql_db2, web_node2, web_node3    |
--------------------------------------------------------
|   us_nodes       |  boston_nodes, dallas_nodes       |
--------------------------------------------------------


S: Edit the /home/bob/playbooks/inventory to make it similar to the one below

# Sample Inventory File

# Web Servers
web_node1 ansible_host=web01.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
web_node2 ansible_host=web02.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass
web_node3 ansible_host=web03.xyz.com ansible_connection=winrm ansible_user=administrator ansible_password=Win$Pass

# DB Servers
sql_db1 ansible_host=sql01.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass
sql_db2 ansible_host=sql02.xyz.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Lin$Pass

[db_nodes]
sql_db1
sql_db2

[web_nodes]
web_node1
web_node2
web_node3

[boston_nodes]
sql_db1
web_node1

[dallas_nodes]
sql_db2
web_node2
web_node3

[us_nodes:children]
boston_nodes
dallas_nodes




158. Ansible Playbooks

Playbooks
 > Ansible playbooks are Ansible's orchestration language
 > Playbooks is where we define what we want Ansible to do
 > It is a set of instructions we provide to Ansible to do its work
 
Example Playbooks
1. Playbook to execute command in servers, and restarting them in order

# Simple Ansible Playbook

- Run command1 on server1
- Run command2 on server2
- Run command3 on server3
- Run command4 on server4
- Run command5 on server5
- Run command6 on server6
- Run command7 on server7
- Run command8 on server8
- Run command9 on server9
- Restrating Server1
- Restrating Server2
- Restrating Server3
- Restrating Server4
- Restrating Server5
- Restrating Server6
- Restrating Server7

2. Playbook for 
	- deploying hundreds of VMs in a public and private cloud infrastructure, 
	- provisioning storage to VMs, 
	- setting up their network and cluster configurations, 
	- configuring applications on them, such as web server or a database server, 
	- setting up load balancing, 
	- setting up monitoring components, 
	- installing and configuring backup clients, and 
	- updating configuration database with information about the new VMs, etc
	
# Complex Ansible Playbook

- Deploy 50 VMs on Public Cloud
- Deploy 50 VMs on Private Cloud
- Provision Storage to all VMs
- Setup Network Configuration on Private VMs
- Setup Cluster Configuration
- Configure Web server on 20 Public VMs
- Configure DB server on 20 Private VMs
- Setup Loadbalacing between web server VMs
- Setup Monitoring components
- Install and Configure backup clients on VMs
- Update CMDB database with new VM information


Creating Playbook
 > Playbooks are written in YAML format
 > It is composed of the following
	1. Play - defines a set of activities (tasks) to be run on a single or group of host
	2. Task - an action to be performed on the host
			- example of these are
				= execute a command
				= run a script
				= install a package
				= shutdown/restart
 > the list of the hosts where we will be executing actions are defined in 'play' level
	- in example below, the 'Play 1' is execute on host 'localhost'
 > Tasks under a play are executed in sequence based on how they are defined in YAML file
	
Example of actual playbooks - playbook.yml
- 
  name: Play 1
  hosts: localhost
  tasks:
  - name: Execute command 'date'
	command: date
  -	name: Execute script on server
	script: test_script.sh
  -	name: Install httpd server
	yum:
		name: httpd
		state: present
  -	name: Start web server
	server:
		name: httpd
		state: started


Playbook format
 > in a Playbook YAML file, we can define one or more Plays
 > Each Play is a DICTIONARY, and has a set of properties which are name. hosts, tasks
	- since Play is a dictionary, the order of these fields or properties does not really matter
	- name and hosts are string properties, while the tasks are an array of dictionaries
 > For 'tasks' of a Play, since it is a list and lists are ordered collection, the position of the entries do MATTER
	- the order of the entries of 'tasks' written in Playbook yaml file defines the sequence of execution of these tasks
	- in example below, if we switch the order of 'Install web service' and 'Start web server', the 'Start web server' will be executed first, then the 'Install web service'

Example - playbook.yml
-	
	hosts: localhost
	name: Play 1
	tasks:
	-	name: Execute command 'date'
		command: date
	-	name: Execute script on server
		script: test_script.sh
-
	name: Play 2
	hosts: localhost
	tasks:
	-	name: Install web service
		yum:
			name: httpd
			state: present
	-	name: Start web server
		service:
			name: httpd
			state: started
			

Hosts in Playbooks
 > the 'hosts' field of each Plays defines the set of servers or host where the Play will be executed
 > we can pass either a host, or a group defined in the inventory file
	- this means that the value specified in the play's 'hosts' field must be present in inventory file in order to work
 > all the connection information used by the Playbook is retrieved from the Inventory file
 > if we pass a group instead of a single host in a Play's 'hosts'. the listed tasks will be executed to all host defined under that group simultaneously
 
Example - playbook.yml and inventory file

playbook.yml
-	
	hosts: localhost
	name: Play 1
	tasks:
	-	name: Execute command 'date'
		command: date
	-	name: Execute script on server
		script: test_script.sh
	-	name: Install web service
		yum:
			name: httpd
			state: present
	-	name: Start web server
		service:
			name: httpd
			state: started
			
inventory file
localhost

server1.company.com
server2.company.com

[mail]
server3.company.com
server4.company.com

[db]
server5.company.com
server6.company.com

[web]
server7.company.com
server8.company.com



module in Playbook
 > modules are the different actions run by tasks
 > in the example above, the Ansible modules used are the following
	- command
	- script
	- yum
	- service
 > we can see these in the entries of the 'tasks' field of a Play
 > there are hundreds of available modules to be used, and their informations are available in the Ansible documentation website
 > one could also run the command below to get familiar with the basic playbook structure
	$ ansible-doc -l
 
 
 
Running Ansible playbooks
 > to run an Ansible playbook, use the command below
	$ ansible-playbook <playbook file name>
 > ex:
	ansible-playbook playbook.yml
 > we could also execute command below for additional help
	$ ansible-playbook --help



159. File: Lab - Playbooks

#1
In this lab exercise, you will use below hosts. Please note down some details about these hosts as given below:

student-node :- This host will act as an Ansible master node where you will create playbooks, inventory, roles, etc and you will be running your playbooks from this host itself.

node01 :- This host will act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this host:
	User: bob
	Password: caleston123
	
node02 :- This host will also act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for the host
	User: bob
	Password: caleston123
	
Note: Please type exit or logout on the terminal or press CTRL+d to logout from a specific node.


#2
Q: Which of the following formats is the Ansible playbook written in?
A: yaml

#3
Q: How many Ansible plays are there in the following given playbook?
---
- name: Setup apache
  hosts: webserver
  tasks:
    - name: install httpd
      yum:
        name: httpd
        state: installed
    - name: Start service
      service:
        name: httpd
        state: started

- name: Setup tomcat
  hosts: appserver
  tasks:
    - name: install httpd
      yum:
        name: tomcat
        state: installed
    - name: Start service
      service:
        name: tomcat
        state: started
		
A: 2


#4
Q: How many tasks are there under 'Setup apache' Ansible play?
---
- name: Setup apache
  hosts: webserver
  tasks:
    - name: install httpd
      yum:
        name: httpd
        state: installed
    - name: Start service
      service:
        name: httpd
        state: started

- name: Setup tomcat
  hosts: appserver
  tasks:
    - name: install httpd
      yum:
        name: tomcat
        state: installed
    - name: Start service
      service:
        name: tomcat
        state: started
A: 2


#5
Q: If we use the following inventory, on which hosts will Ansible install the httpd package using the given playbook?
# Inventory file
[webserver]
web1
web2
[appserver]
app1
app2
app3

# playbook
---
- name: Setup apache
  hosts: webserver
  tasks:
    - name: install httpd
      yum:
        name: httpd
        state: installed

- name: Setup tomcat
  hosts: appserver
  tasks:
    - name: install httpd
      yum:
        name: tomcat
        state: installed
		
A: web1 and web2


#6
Q: Which of the following commands can you use to run an Ansible playbook named 'install.yaml'?
(A) ansible-playbook install.yaml
(B) ansible-playbook run install.yaml
(C) ansible-playbook -p install.yaml
(D) ansible-playbook -i install.yaml
A: choice A


#7
Q: A sample playbook named 'update_service.yml' is shown below, it is supposed to update a service on your servers.
Which command would you use to run 'update_service.yml' playbook in check mode?
A. ansible update_service.yml
B. ansible-playbook update_service.yml --check
C. ansible-playbook update_service.yml
D. ansible-playbook --check update_service.yml

# playbook
- hosts: all
  tasks:
    - name: Install a new package
      apt:
        name: new_package
        state: present

    - name: Update the service
      service:
        name: my_service
        state: restarted

    - name: Check service status
      service:
        name: my_service
        state: started
		
A: choice B


#8
Q: Consider again the same sample playbook named 'update_service.yml' as shown below

- hosts: all
  tasks:
    - name: Install a new package
      apt:
        name: new_package
        state: present

    - name: Update the service
      service:
        name: my_service
        state: restarted

    - name: Check service status
      service:
        name: my_service
        state: started
		
Lets suppose you have already ran this playbook on your server. Now, once you run this playbook in check mode against same server, which tasks would result in CHANGED status?
A. Install a new package
B. Update the service
C. Check service status
D. All of the tasks

A: choice B


#9
Q: There is another sample playbook named 'configure_database.yml' that modified a configuration file on your database servers. The initial code sample is as follows.

- hosts: all
  tasks:
    - name: Set max connections
      lineinfile:
        path: /etc/postgresql/12/main/postgresql.conf
        line: 'max_connections = 500'

    - name: Set listen addresses
      lineinfile:
        path: /etc/postgresql/12/main/postgresql.conf
        line: 'listen_addresses = "*"'
		
Which command would you use to run the 'configure_database.yml' playbook in both check mode and diff mode?
A. ansible-playbook configure_database.yml --diff
B. ansible-playbook configure_database.yml --check
C. ansible-playbook configure_database.yml --check --diff
D. ansible-playbook --diff --check configure_database.yml

A: choice C


#10
Q: Consider again the same sample playbook named 'configure_database.yml' as shown below.

- hosts: all
  tasks:
    - name: Set max connections
      lineinfile:
        path: /etc/postgresql/12/main/postgresql.conf
        line: 'max_connections = 500'

    - name: Set listen addresses
      lineinfile:
        path: /etc/postgresql/12/main/postgresql.conf
        line: 'listen_addresses = "*"'
		
To check the 'configure_database.yml' playbook for syntax errors, which command would you use?
A. ansible-playbook configure_database.yml
B. ansible-playbook configure_database.yml --syntax
C. ansible-playbook --syntax-check configure_database.yml
D. ansible configure_database.yml --syntax-check

A: choice C


#11
Q: You've been given a playbook named 'database_setup.yml' that is supposed to set up a PostgreSQL database on your servers. Before deploying it, you want to ensure that it adheres to best practices and doesn't have any style-related issues.
The initial sample playbook is as follows:
- name: Database Setup Playbook
  hosts: db_servers
  tasks:
    - name: Ensure PostgreSQL is installed
      apt:
        name: postgresql
        state: latest
        update_cache: yes

    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started

    - copy:
        src: /path/to/pg_hba.conf
        dest: /etc/postgresql/12/main/pg_hba.conf
      notify:
        - Restart PostgreSQL
		
Which command would you use to run 'ansible-lint' on the 'database_setup.yml' playbook?
A. ansible database_setup.yml --lint
B. ansible-lint database_setup.yml
C. ansible-playbook database_setup.yml --lint
D. lint-ansible database_setup.yml

A: choice B


#12
Q: Consider again the same sample playbook named 'database_setup.yml' as shown below.
- name: Database Setup Playbook
  hosts: db_servers
  tasks:
    - name: Ensure PostgreSQL is installed
      apt:
        name: postgresql
        state: latest
        update_cache: yes

    - name: Start PostgreSQL service
      service:
        name: postgresql
        state: started

    - copy:
        src: /path/to/pg_hba.conf
        dest: /etc/postgresql/12/main/pg_hba.conf
      notify:
        - Restart PostgreSQL
		
After running 'ansible_lint' on the playbook, which of the following issues might you expect to see?
A. Incorrect indentation.
B. Deprecated 'apt' module.
C. Missing 'name' attribute for a task.
D. Use of a blacklisted command.

S: Use 'ansible-lint' command to the playbook
A: choice A and C


#13
Q: You've been given feedback from 'ansible-lint' about the potential issues in your hypothetical 'webserver_setup.yml' playbook. The feedback mentioned issues with indention, deprecated modules, and missing 'name' attributes.
Which of the following is NOT a recommended action based on the feedback?
A. Correcting the indentation in the playbook.
B. Replacing deprecated modules with their newer counterparts.
C. Ignoring the feedback and proceeding with playbook execution.
D. Adding 'name' attributes to tasks that are missing them.

A: choice C


#14
Q: If 'ansible-lint' provides no output after checking a playbook, what does it indicate?
A. The playbook has syntax errors.
B. The playbook is empty.
C. The playbook adheres to best practices and has no style-related issues.
D. ansible-lint failed to check the playbook

A: choice C


#15
Q: Update the name of the paly in /home/bob/playbooks/playbook.yaml playbook to 'Execute a date command on localhost'

---
- name: 'Execute a date command on localhost'
  hosts: localhost
  become: yes
  tasks:
    - name: 'Execute a date command'
      command: date
	  
S: Use 'ansible-lint' and 'ansible-playbook' command and pass the playbook.yaml file in order to check and run the playbook


#16
Q: Update the playbook /home/bob/playbooks/playbook.yaml to add a task name 'Task to display hosts file' for the existing task

---
- name: 'Execute a command to display hosts file on localhost'
  hosts: localhost
  become: yes
  tasks:
    - name: 'Task to display hosts file'
      command: 'cat /etc/hosts'   
	  

#17
Q: We have reset the playbook '/home/bob/playbooks/playbook.yaml', now update it to add another task. The new task must execute the command 'cat /etc/resolv.conf' and set its name to 'Task to display nameservers' 

---
- name: 'Execute two commands on localhost'
  hosts: localhost
  become: yes
  tasks:
    - name: 'Execute a date command'
      command: date
    - name: 'Task to display nameservers'
      command: 'cat /etc/resolv.conf'
	  
#18
Q: So far, we have been running all tasks on 'localhost'. We would now liek to run these tasks on 'node01', this host is already defined in /home/bob/playbooks/inventory file. Update the playbook /home/bob/playbooks/playbook.yaml to run the tasks on the node01 host.
S: Change 'hosts' field of the play to node01

---
- name: 'Execute two commands on node01'
  hosts: node01
  become: yes
  tasks:
    - name: 'Execute a date command'
      command: date
    - name: 'Task to display hosts file'
      command: 'cat /etc/hosts'
	  

#19
Q: Refer to the /home/bob/playbooks/inventory file. We would like to run the /home/bob/playbooks/playbook.yaml on all servers defined under web_nodes group.
NOTE: Use the group name in playbook as defined in the inventory file

---
- name: 'Execute two commands on web_nodes'
  hosts: web_nodes
  become: yes
  tasks:
    - name: 'Execute a date command'
      command: date
    - name: 'Task to display hosts file'
      command: 'cat /etc/hosts'
	  

#20
Q: Update the /home/bob/playbooks/playbook.yaml to add new play named 'Execute a command on node02', and a task under it to execute 'cat /etc/hosts' command on node02 host, name the task 'Task to display hosts file on node02'
Refer to the given inventory file.

---
- name: 'Execute two commands on node01'
  hosts: node01
  become: yes
  tasks:
    - name: 'Execute a date command'
      command: date
    - name: 'Task to display hosts file on node01'
      command: 'cat /etc/hosts'
- name: 'Execute a command on node02'
  hosts: node02
  become: yes
  tasks:
    - name: 'Task to display hosts file on node02'
      command: 'cat /etc/hosts'



160. Ansible Modules

Modules
 > Ansible modules are categorized based on their functionality
	- examples includes but not limited to
		1. System
		2. Commands
		3. Files
		4. Database
		5. Cloud
		6. Windows
		
Categories
System
 > System modules are actions to be performed at a system level such as modifying the following
	- User
	- Group
	- Hostname
	- Firewall configurations
	- Iptables
	- Lvg (logical volume groups)
	- Lvol (logical volumes)
	- Make
	- Mount
	- Ping
	- Timezone
	- Systemd
	- Service (e.g. starting or stopping a service)
	
Command
 > are used to execute commands or scripts on a remote node or host
 > example modules includes but not limited to
	- Command (i.e. execute single command)
	- Expect (i.e. creating an interactive execution through prompts)
	- Raw
	- Script (i.e. running a bash script)
	- Shell
	
Files
 > File modules help work with files
 > example modules includes but not limited to
	- acl (Access Control List)
	- archive (i.e. used for compress and unpack files)
	- copy
	- file 
	- find (for finding specific contents in file)
	- lineinfile (for getting the line where a match is found)
	- replace (for replacing content of the file)
	- stat
	- template
	- unarchive

Database
 > database modules help in working with databases such as MongoDB, MySQL, MSSQL, or PostgreSQL to add or remove database, or to modify database configurations
 > example modules includes
	- mongodb
	- mssql
	- mysql
	- postgresql
	- proxysql
	- vertica
	
Cloud
 > the cloud category has a vast collection of modules for various different cloud providers like
	- Amazon
	- Atomic
	- Azure
	- Centrylink
	- Cloudscale
	- Cloudstack
	- Digital Ocean
	- Docker
	- Google
	- Linode
	- Openstack
	- Rackspace
	- Smartos
	- Softlayer
	- VMware
 > there are modules under these cloud providers for performing tasks such as
	- creating and destroying instances
	- performing configurations
	- chnages in networking and security
	- managing containers, data centers, clusters, virtual networking
	- vSan
	
Windows
 > windows modules helps us use ANsible in a Windows environment
 > some of these are:
	- win_copy (copy files)
	- win_command (execute command in windows machine)
	- win_domain
	- win_file (handle file)
	- win_iis_website (IIS website)
	- win_msg
	- win_msi (install sofrware using msi installer)
	- win_package
	- win_ping
	- win_path
	- win_robocopy
	- win_regedit (for editing registry)
	- win_shell
	- win_service (for managing services)
	- win_user
	
	
Example modules
1. command
 > command module is used to execute commands on a remote node
 > parameters of the command module are listed below
	1. chdir
		- cd into this directory before running the command
	2. creates
		- a filename or (since 2.0) glob pattern, when it already exist, this step will not run
	3. executable
		- change the shell used to execute the command
		- should be an absolute path to the executable
	4. free_form
		- the command module takes a free form command to run
		- there is no paramater actually named 'free form'. See the examples!
		- in example playbook yml file below, we can see the free form parameters like
			= cat /etc/resolv.conf
			= mkdir /folder
	5. removes
		- a filename or (since 2.0) glob pattern
		- when it does not exsit, this step will not be run
	6. warn
		- added in 1.8
		- if command warnings are on in ansible.cfg, do not warn about this particular line if set to no/false
		
Example playbook.yml
- name: Play 1
  hosts: localhost
  tasks:
  - name: Execute command 'date'
	command: date
  - name: Display resolv.conf contents
	command: cat /etc/resolv.conf
  -	name: Display resolv.conf contents, but change directory first
	command: cat resolv.conf chdir=/etc
  - name: Creates directory folder, but creates the folder first
	command: mkdir /folder creates=/folder
	
	
2. script
	> runs a local script on a remote node after transferring it
	> it executes a script which is located LOCALLY on the Ansible controller on one or more remote nodes after transferring it over
	
Example playbook.yml
- name: Play 1
  hosts: localhost
  tasks:
  -	name: Run a script on remote server
	script: /some/local/script.sh -arg1 -arg2
	
	
3. service
	> used to maintain services on a system such as starting, stopping, or restarting services
	> as to why we have 'started' instead of 'start' for the state, we are essentially instructing the Ansible to ENSURE that the service is in STARTED state

Example playbook.yml
- name: Start Services in order
  hosts: localhost
  tasks:
  -	name: Start the database service
	service: name=postgresql state=started
  -	name: Start the httpd service
	service: name=httpd state=started
  - name: Start the nginx service
    service:
		name: nginx
		state: started
		
		
Idempotency
	> Idempotency is a term mostly used in configuration management tools like Ansible.
	> an operation is idempotent if the result of performing it once is exactly the same as the result of performing it repeatedly without any intervening actions.
	> most of the module in Ansible is used to ensure that the target machine are in particular state
		- ex: machine have a specific service in started state
	> overall idea is that we should be able to run the same playbook again, and Ansible should report that everything is in an expected state
		- if something is not, Ansible takes care of putting it to the expected state
	> ex: Why 'started' and not 'start' in service module
		- we are essentially instructing Ansible to ensure the service is in started state
		- if httpd is not already started => start it
		- if httpd is already started => do nothing
		
		
4. lineinfile
	> search for a line in a file and replace it or add it if it doesn't exist
	> ex: in /etc/resolv.conf, we want to add additional entry
		- /etc/resolv.conf content
			nameserver 10.1.250.1
			nameserver 10.1.250.2
		- additional entry to add
			nameserver 10.1.250.10
	> using the playbook below, we can add additional entry on the file, assumming that it does not exist on the file itself
	
Example playbook.yml
- name: Add DNS server to resolv.conf
  hosts: localhost
  tasks:
  -	lineinfile:
		path: /etc/resolv.conf
		line: 'nameserver 10.1.250.10'
		
	> on the topic of idempotency of Ansible, if we try to replicate the action by using a simple script, it will repeatedly add the entry even though it already exist

Ex: script.sh
# Sample script
echo "nameserver 10.1.250.10" >> /etc/resolv.conf

/etc/resolv.conf
nameserver 10.1.250.1
nameserver 10.1.250.2
nameserver 10.1.250.10
nameserver 10.1.250.10
nameserver 10.1.250.10


/etc/resolv.conf with Ansible's lineinfile
nameserver 10.1.250.1
nameserver 10.1.250.2
nameserver 10.1.250.10

	
 
NOTE:
1. Normally, the modules takes a key=value pair as parameters. But there are some modules that takes a free form input like 'script' or 'command'
2. Parameters of a module can be written either as key=value format (the module will be a string field), or as properties (the module will be a dictionary)

EX:
- name: Start Services in order
  hosts: localhost
  tasks:
  -	na me: Start the database service
	service: name=postgresql state=started
	
- name: Start Services in order
  hosts: localhost
  tasks:
  -	name: Start the database service
	service: 
		name: postgresql 
		state: started



161. Lab - Modules

#1
Q: In this lab exercise you will use below hosts. Please note down some details about these hosts as given below :
student-node :- This host will act as an Ansible master node where you will create playbooks, inventory, roles etc and you will be running your playbooks from this host itself.
 
node01 :- This host will act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this host:
	User: bob
	Password: caleston123

node02 :- This host will also act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this host:
	User: bob
	Password: caleston123

Note: Please type exit or logout on the terminal or press CTRL + d to log out from a specific node.


#2
Q: Which of the following Ansible modules support 'free_form' parameter?
A: command

#3
Q: Does Ansible support idempotancy?
A: Yes

#4
Q: Which of the following commands we can use to see the information about Ansible modules from command line?
A: ansible-doc

#5
Q: Which Ansible module is used in the following playbook?

---
- hosts: localhost
  become: yes
  become_user: root
  tasks:
    - name: create user
      user:
        name: admin
		
A: user


#6
Q: Which of the following statements are true about 'lineinfile' Ansible module?
	A. It only adds the given line in file if that line doesn't exist in that file.
	B. It adds the given line in file even if that line already exists in that file.
	C. It replaces all existing lines in the file with a new given line.
	D. It keeps the existing lines as well and add a new given line in the file.
A: choices A and D


#7
Q: What are Ansible 'system' modules used for?
	A. System modules are basically used to create/update files and directories.
	B. System modules are actions to be performed at a system level such as modifying the users and groups on a system, modifying iptables, starting/stopping the service etc.
	C. System modules are used to execute commands or scripts on a system.
	D. System modules are used to install and setup packages on a system.
A: choice B


#8
Q: Your organization uses a proprietary cloud service that is not natively supported by Ansible. You need to develop a custom Ansible 'module' to interact with this cloud service's API and provision resources.
Which type of the Ansible plugins allows you to integrate with a cloud provider's API custom resource provisioning?
	a. Connection Plugin
	b. Lookup Plugin
	c. Module Plugin
	d. Action Plugin
A: choice C, since we would need to do several actions using the API provided by cloud provider


#9
Q: You've developed a custom module named 'custom_cloud'. To test this module in a playbook named 'deploy.yml', which of the following task definitions is correct?
a.
- name: Provision custom cloud resource
  action: custom_cloud
  args:
    param1: value1
    param2: value2


b.
- name: Provision custom cloud resource
  module: custom_cloud
  parameters:
    - param1: value1
    - param2: value2


c.
- name: Provision custom cloud resource
  custom_cloud:
    param1: value1
    param2: value2


d.
- name: Provision custom cloud resource
  use_module: custom_cloud
  with_args:
    param1: value1
    param2: value2

A: choice C


#10
Q: You are tasked with setting up an Ansible playbook that automates the deployment of applications on AWS 'ec2' instances. Before running the playbook, you need to ensure that Ansible has an up-to-date inventory of all 'ec2' instances in your AWS account
Which type of Ansible plugin would you use to fetch real-time information about your AWS ec2 instances.
a. Lookup Plugin
b. Filter Plugin
c. Callback Plugin
d. Dynamic Inventory Plugin
A: choice D, 
N: Dynamic Inventory plugin help you manage inventory that fluctuates over time like ec2 intances


#11
Q: You have a custom dynamic inventory script named 'aws_inventory.py'. Which command would you use to list all hosts in your AWS inventory using this script.
	a. ansible-inventory --list -i aws_inventory.py
	b. ansible-playbook --inventory aws_inventory.py
	c. ansible aws_inventory.py --list-hosts
	d. ansible-list --inventory aws_inventory.py
A: choice A


#12
Q: You are tasked with finding a module in Ansible that helps manage Cisco devices. Using the 'Modules & Plugins' index, which of the following modules is specifically designed for managing Cisco IOS devices?
	a. cisco.config
	b. cisco.ios
	c. cisco.setup
	d. cisco.network
A: choice B


#13
Q: Which of the following is not a key parameter available for 'cisco.ios' module?
	a. hostname
	b. password
	c. ios_version
	d. username
A: choice C
N: https://docs.ansible.com/ansible/latest/collections/cisco/ios/ios_cliconf.html#ansible-collections-cisco-ios-ios-cliconf


#14
Q: Which of the following Ansible versions is cisco.ios module likely to be compatible with?
Note: This can be a hypothetical answer; the actual version compatibility would need to be checked in the 'Modules & Plugin index'
	a. Ansible 1.5
	b. Ansible 2.8
	c. Ansible 3.1
	d. Ansible 4.0
A: choice B, cisco.ios requires Ansible >= 2.14.0
N: https://galaxy.ansible.com/ui/repo/published/cisco/ios/?extIdCarryOver=true&sc_cid=701f2000001OH7YAAW


#15
Q: You're planning to deploy an application on AWS and need to set up ec2 instances using Ansible. Which module is primarily used for managing ec2 instances?
	a. aws_instance
	b. aws_ec2_config
	c. ec2_instance
	d. aws_setup
A: choice C
N: https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html#ansible-collections-amazon-aws-ec2-instance-module


#16
Q: Update the playbook name 'playbook.yaml' under '/home/bob/playbooks' directory with a task named 'Execute a script' to run a script. This script is located at '/tmp/install_Script.sh' on 'student-node'
Use the 'script' node
Note: There is already an inventory file /home/bob/playbooks/inventory present on student-node system

playbook.yml
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: /tmp/install_script.sh
	  
	  
#17
Q: Update the playbook '/home/bob/playbooks/playbook.yaml' to add a new task to start 'httpd' service on all web nodes defined in /home/bob/playbooks/inventory file
Use the 'service' module

---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: httpd
        state: started


#18
Q: Update the playbook '/home/bob/playbooks/playbook.yaml' to append the /var/www/html/index.html file on all web nodes. The line needs to be added is 'Welcome to ansible-beginning course', create the index.html file if odesn't exist
Use the 'lineinfile' module

---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
    - name: 'Append text in index.html'
      lineinfile:
        path: /var/www/html/index.html
        line: 'Welcome to ansible-beginning course'
        create: true
		
		
#19
Q: Update the playbook /home/bob/playbooks/playbook.yaml to add a new task to create a new user called 'web_user'
Use the user module for this task. You can find the user details as below.
	Username: web_user
	uid: 1040
	group: developers
	
---
- name: 'hosts'
  hosts: all
  become: yes
  tasks:
    - name: 'Execute a script'
      script: '/tmp/install_script.sh'
    - name: 'Start httpd service'
      service:
        name: 'httpd'
        state: 'started'
    - name: "Update /var/www/html/index.html"
      lineinfile:
        path: /var/www/html/index.html
        line: "Welcome to ansible-beginning course"
        create: true
    - name: 'Create new user in the machine'
      user:
        name: 'web_user'
        uid: 1040
        group: 'developers'
		
		
		
		
162. Ansible Variables

Variables
 > Variables stores information that varies with each host/node/items
	- ex: If we are trying to perform the same operation of applying patches to hundreds of servers, we only need a single playbook for all servers.
	- However, its the variables that store information about the different host names, usernames, or passwords that are different for each server
 > we can define as many variables as required
 > there are three ways of defining variables
	1. in Ansible inventory
		- for Ansible inventory file, we can add variable by passing key=value pair in each entry
	2. in Ansible playbook
		- for Ansible playbook, we can add variable in each Play by adding 'vars' property, and passing as many properties in key:value pair under the 'vars' dictionary as we can
	3. in a yaml file dedicated for variables
		- we can also define variables
		- based on the name of the yaml file, it will be accessible to specific host
		- ex: web.yml file will contain variables accessible to 'web' host
 
Example variables used in inventory file
 > in example inventory file below, we can see the ansible_host, ansible_connection, and ansible_ssh_pass which are examples of variables

# Sample Inventory File
# Web Servers
web1 ansible_host=server1.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!
web2 ansible_host=server2.company.com ansible_connection=ssh ansible_user=root ansible_ssh_pass=Password123!


Example variables in Playbook yaml file
 > below, we added 'dns_server' variable with value 10.1.250.10 under the play 'Add DNS server to resolv.conf'
 
- name: Add DNS server to resolv.conf
  hosts: localhost
  vars:
    dns_server: 10.1.250.10
  tasks:
  -	lineinfile:
		path: /etc/resolv.conf
		line: 'nameserver 10.1.250.10'
  
Example variables in a file dedicated for variables
variable1: value1
variable2: value2



Using variables
 > to use variables in playbook, we would need to pass the variable name enclosed in DOUBLE BRACES
 > when the playbook is ran, the values of the variables inside the double curly braces will be replaced
 > in example 1 below, we used the 'dns_server' variable and pass it to the lineinfile module
 > in example 2, we can see that the playbook uses variables http_port, snmp_port, and inter_ip_range. 
	- these variables are defined in the inventory file for entry or host 'web'.
	- due to this, the variables will be accessible in the play where they are used since 'hosts' of the play is the same host where the variables are defined
	- we can also use a dedicated yaml file with same name as the host in order to contain variables of it
		= 'web.yml' file and variables defined in it will be accessible to host 'web'
 
Example 1
- name: Add DNS server to resolv.conf
  hosts: localhost
  vars:
    dns_server: 10.1.250.10
  tasks:
  -	lineinfile:
		path: /etc/resolv.conf
		line: 'nameserver {{ dns_server }}'
		

Example 2
# Sample playbook
- name: Set Firewall Configurations
  hosts: web
  tasks:
  - firewalld:
      service: https
	  permanent: true
	  state: enabled
  - firewalld:
	  port: '{{ http_port }}'/tcp
	  permanent: true
	  state: disabled
  - firewalld:
	  port: '{{ snmp_port }}'/tcp
	  permanent: true
	  state: disabled
  - firewalld:
	  port: '{{ inter_ip_range }}'/tcp
	  permanent: true
	  state: disabled
		
# Sample Inventory file
web http_port=8081 snmp_port=161-162 inter_ip_range=192.0.2.0

# Sample variable File - web.yml
http_port: 8081
snmp_port: 161-162
inter_ip_range: 192.0.2.0



Jinja2 Templating
 > this is the format used when using variables in the playbook
 > format is {{ varName }}
	- variable name enclosed in double brackets
 > if the variable is used at the start of the value assignment, adding single qoute around the double brackets is REQUIRED, else we can omit it
	- ex:
		WRONG	source: {{ inter_ip_range }}
		CORRECT	source: '{{ inter_ip_range }}'
		CORRECT	source: SomeThing{{ inter_ip_range }}SomeThing
		
		
		
		
163. File: Lab - Variables

#1
Q: In this lab exercise you will use below hosts. Please note down some details about these hosts as given below :

student-node :- This host will act as an Ansible master node where you will create playbooks, inventory, roles etc and you will be running your playbooks from this host itself.

node01 :- This host will act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this host:
	User: bob
	Password: caleston123

node02 :- This host will also act as an Ansible client/remote host where you will setup/install some stuff using Ansible playbooks. Below are the SSH credentials for this host:
	User: bob
	Password: caleston123

Note: Please type exit or logout on the terminal or press CTRL + d to log out from a specific node.


#2
Q: Can we define variables in an Ansible inventory file?
A: YES

#3
Q: Can we define variables in an Ansible playbook?
A: YES

#4
Q: Which of the following formats is used to call a varible in an Ansible playbook?
A: '{{ variable_name }}'

#5
Q: The '/home/bob/playbooks/playbook.yaml' playbook is adding a name server entry in '/tmp/resolv.conf' sample file on 'localhost'. The name server information is already added to the '/home/bob/playbooks/inventory' file as a variable called 'nameserver_ip'
Replace the hardcoded ip address of the name server in this playbook to use the value from the variable defined in the inventory file.

NOTE: You need not to execute this playbook as of now.

# inventory file
localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}


# playbook.yaml
---
- name: 'Add nameserver in resolv.conf file on localhost'
  hosts: localhost
  become: yes
  tasks:
    - name: 'Add nameserver in resolv.conf file'
      lineinfile:
        path: /tmp/resolv.conf
        line: 'nameserver {{ nameserver_ip }}'


#6
Q: We have updated the '/home/bob/playbooks/playbook.yaml' playbook to add new task to disable SNMP port on localhost. However, the port is hardcoded in the playbook. Update the playbook to replace the hardcoded value of the SNMP port to use the value from the variable named 'snmp_port', defined in the inventory file
NOTE: You need not to execute this playbook as of now

# inventory file - same as #5

# playbook.yaml



#7
Q: We have reset the /home/bob/playbooks/playbook.yaml playbook. Its printing some personal information of an employee. We would like to move the 'car_model', 'country_name', and 'title' values to the respective variables, and these variables should be defined at the play level.
Add three new variables named 'car_model', 'country_name' and 'title' under the play and move the values over there. Use these variables within the task to remove the hardcoded values.

# Sample playbook
---
- hosts: localhost
  vars:
    car_model: 'BMW M3'
    country_name: 'USA'
    title: 'Systems Engineer'
  tasks:
    - command: 'echo "My car is {{ car_model }}"'
    - command: 'echo "I live in the {{ country_name }}"'
    - command: 'echo "I work as a {{ title }}"'
	
	

#8
Q: The '/home/bob/playbooks/app_install.yaml' playbook is responsible for installing a list of packages on a remote server(s). The list of packages to be installed is already added to the '/home/bob/playbooks/inventory' file as a list variable called 'app_list'.
Right now, the list of packages to be installed is hardcoded in the playbook. Update the '/home/bob/playbooks/app_install.yaml' playbook to replace the hardcoded list of packages to use the values from the 'app_list' variable defined in the inventory file. Once updated, please run the playbook once to make sure it works fine.

# inventory file
localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}


# playbook.yaml
---
- hosts: all
  become: yes
  tasks:
    - name: Install applications
      yum:
        name: "{{ item }}"
        state: present
      with_items: '{{ app_list }}'
	  
	 

#9
Q: The '/home/bob/playbooks/user_setup.yaml' playbook is responsible for setting up a new user on a remote server(s). The user details like username, password, and email are already added to the '/home/bob/playbooks/inventory' file as a dictionary variable called 'user_details'.
Right now the user details is hardcoded in the playbook. Update the /home/bob/playbooks/user_setup.yaml playbook to replace the hardcoded values to use the values from the user_details variable defined in the inventory file. Once updated, please run the playbook once to make sure it works fine.

# inventory file
localhost ansible_connection=local nameserver_ip=8.8.8.8 snmp_port=160-161
node01 ansible_host=node01 ansible_ssh_pass=caleston123
node02 ansible_host=node02 ansible_ssh_pass=caleston123
[web_nodes]
node01
node02

[all:vars]
app_list=['vim', 'sqlite', 'jq']
user_details={'username': 'admin', 'password': 'secret_pass', 'email': 'admin@example.com'}


# playbook
---
- hosts: all
  become: yes
  tasks:
    - name: Set up user
      user:
        name: "{{ user_details.username }}"
        password: "{{ user_details.password }}"
        comment: "{{ user_details.email }}"
        state: present

