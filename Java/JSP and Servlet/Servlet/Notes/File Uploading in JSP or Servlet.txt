File Uploading in JSP / Servlet using Apache Commons FileUpload

Tools needed

1. Apache Commons FileUpload API
	> component that provides a simple yet flexible means of adding support for MULTIPART file upload functionality to servlet and web applications

Apache Commons FileUpload Classes and Interface

FileItem interface
	> This class represents a file or form item that was received within a multipart/form-data POST request.

ServletFileUpload class
	> High level API for processing file uploads.
	> This class handles multiple files per single HTML widget, sent using multipart/mixed encoding type, as specified by RFC 1867. 
	> Use parseRequest(HttpServletRequest) to acquire a list of FileItems associated with a given HTML widget.
	> How the data for individual parts is stored is determined by the factory used to create them; a given part may be in memory, on disk, or somewhere else.

DiskFileItem class
	> implementation of FileItem interface
	> created using a DiskFileItemFactory class

DiskFileItemFactory class
	> The default FileItemFactory implementation. 
	> This implementation creates FileItem instances which keep their content either in memory, for smaller items, or in a temporary file on disk, for larger items. 
	> The size threshold, above which content will be stored on disk, is configurable, as is the directory in which temporary files will be created.
	> If not otherwise configured, the default configuration values are as follows:
		- Size threshold is 10KB.
		- Repository is the system default temp directory, as returned by System.getProperty("java.io.tmpdir").



TO ADD "UPLOAD FILE" FUNCTIONALITY IN HTML
1. Add input with type="file" in the form
	> NOTE: adding multiple attribute to the file-type input will allow us to upload MULTIPLE FILES
		- doing this will change the upload button text from "Upload file" to "Upload files"

Ex:

	<form action="upload" method="post" enctype="multipart/form-data">
		<input type="file" name="file" multiple>
		<input type="submit">
	</form>



FETCHING FILES FROM JSP / SERVLET
2. Import the following packages from Apache Commons FileUpload API
	
	org.apache.commons.fileupload.FileItem;
	org.apache.commons.fileupload.servlet.ServletFileUpload;
	org.apache.commons.fileupload.DisFileItemFactory;


3. Create a ServletFileUpload object
	> assign it the value of a new ServletFileUpload instance
	> pass a new instance of DiskFileItemFactory() inside its Constructor 

INSIDE doPost() of Servlet

		ServletFileUpload sf = new ServletFileUpload(new DiskFileItemFactory());



4. Create List of FileItem to hold the Files
	> assign it the value of the result of parseRequest() of ServletFileUpload object
		- pass the HttpServletRequest parameter inside the parseRequest()

INSIDE doPost() of Servlet

		List<FileItem> multifiles = sf.parseRequest(request);


5. Iterate all of the FileItems inside the multifiles
	> for each FileItems, call its write()
	> inside write(), pass a new instance of File object (from java.io package)
	> inside File Constructor, pass 
		- the file location path on where you want to store the file AND
		- the name of FileItem by calling its getName()

INSIDE doPost()

	for(FileItem item : multifiles) {
		item.write(new File("C:\\Users\\glenn\\eclipse-workspace\\FileUploadDemo\\WebContent\\" + item.getName()));
	}



6. Enclose the statements we made earlier in try-catch block

INSIDE doPost()

		ServletFileUpload sf = new ServletFileUpload(new DiskFileItemFactory());
		try {
			List<FileItem> multifiles = sf.parseRequest(request);

			for(FileItem item : multifiles) {
				item.write(new File("C:\\Users\\glenn\\eclipse-workspace\\FileUploadDemo\\WebContent"));
			}
			System.out.println("File Uploaded");
		}catch (Exception e) {
			e.printStackTrace();
		}











