08. Thymeleaf - Spring Security Integration modules

Thymeleaf - Spring Security integration modules
	> needed in order for Thymeleaf to access Spring Security taglibs

Requirements
1. Thymeleaf 3.0.10+
2. Spring Framework version 3.0.x to 5.1.x
3. Spring Security version 3.0.x to 5.1.x
4. Web environment (Spring Security Integration cannot work offline)
	- Works with both Spring MVC and Spring WebFlux


Dependency

		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity5</artifactId>
		</dependency>


XML namespace
	> needed to use the expression languages

	<html xmlns:sec="http://www.thymeleaf.org/extras/spring-security">





Expression utitly objects


#authentication
	> representing the Spring Security authentication object
		- an object implementing the org.springframework.security.core.Authentication interface

EX:
<div th:text="${#authentication.name}">
  The value of the "name" property of the authentication object should appear here.
</div>



#authorization
	> expression utility object with methods for checking authorization based on expressions, URLs and Access Control Lists

EX:
<div th:if="${#authorization.expression('hasRole(''ROLE_ADMIN'')')}">
  This will only be displayed if authenticated user has role ROLE_ADMIN.
</div>



Attributes to add in HTML generated by Thymeleaf

sec:authentication
	> outputs a Property of the Authentication object
	> similar to <sec:authentication/> JSP tag
	> takes a String value
		- sec:authentication="prop"

EX:
<div sec:authentication="name">
  The value of the "name" property of the authentication object should appear here.
</div>



sec:authorize
	> renders the element children (tag content) if the authenticated user is authorized to see it according to the specified Spring Security expression
		- meaning the element children will NOT BE IN SCREEN if expression is not met
	> takes an attribute expression as value

EX:
<div sec:authorize="hasRole('ROLE_ADMIN')">
  This will only be displayed if authenticated user has role ROLE_ADMIN.
</div>


<div sec:authorize="${hasRole(#vars.expectedRole)}">
  This will only be displayed if authenticated user has a role computed by the controller.
</div>


<div sec:authorize-url="/admin">
  This will only be displayed if authenticated user can call the "/admin" URL.
</div>


<div sec:authorize-url="POST /admin">
  This will only be displayed if authenticated user can call the "/admin" URL
  using the POST HTTP method.
</div>
	
	


